<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta charset="utf-8" />

    <title>From Java to Native in 80 Cycles</title>

    <meta name="description" content="From Java to Native in 80 Cycles" />
    <meta name="author" content="Volker H. Simonis" />

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui" />

    <link rel="stylesheet" href="reveal.js/css/reveal.css" />
    <link rel="stylesheet" href="reveal.js/css/theme/joker2017.css" id="theme" />

    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="reveal.js/lib/css/monokai_sublime.css" />

    <style type="text/css">
/* display preprocessor directives italic (could also handle 'hljs-meta-keyword' (for "include" and 'hljs-meta-string' for the inlcude file in the future) */
.hljs-meta {
  color: #7571ff;
  font-style: italic;
}

.scrollable {
    bottom: 0px;
    overflow-y: auto  !important;
    overflow-x: hidden !important;
}

.reveal .slides > section.demo,
.reveal .slides > section > section.demo {
    padding: 0;
}

.reveal .big {
    font-size: .8em;
    line-height: 1.3em;
}

.reveal pre.console {
    background-color: black;
    color: #00ff00;
}

code.terminal .hljs-title {
    color: #00ff00;
}

/* Used for styling command lines in a 'java' code block */
code.java .hljs-title-terminal {
    color: #00ff00;
}

.reveal pre.noshadow {
    border-radius: 0;
    box-shadow: unset;
}

.reveal pre code {
    max-height: 100%;
}
.bold {
    font-weight: bold;
}

.reveal .outline_white {
    color: white;
    text-shadow:
        -2px -2px 0 #000,
         2px -2px 0 #000,
        -2px  2px 0 #000,
         2px  2px 0 #000;
    min-height: 1.1em;
    text-align: center;
}
.reveal .outline_black {
    color: black;
    text-shadow:
        -2px -2px 0 #fff,
         2px -2px 0 #fff,
        -2px  2px 0 #fff,
         2px  2px 0 #fff;
    min-height: 1.1em;
    text-align: center;
}

.reveal .slide-number {
    position: fixed;
    display: block;
    left: 15px;
    bottom: 15px;
    opacity: 0.9;
    z-index: 31;
    font-size: 14px;
    text-align: center;
}
.reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 {
    text-transform: none;
}

.hljs-class .hljs-title {
    /* fix "public static class Y extends X {" such that 'Y' will be formatted the same like 'X' */
    color: #A6E22E;
    font-style: italic;
}

mark {
    color: black;
    background-color: lightyellow;
    border-radius: 10px;
}
mark.orange {
    color: black;
    background-color: orange;
    border-radius: 10px;
}
mark.border {
    color: inherit;
    background-color: inherit;
    border: 3px solid #1B91FF;
    /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
    margin: 0 -5px 0 -5px;
    border-radius: 10px;
}
mark.border-no-top {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 0px 3px 3px 3px;
    border-radius: 0px 0px 10px 10px;
}
mark.border-no-bottom {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 3px 3px 0px 3px;
    border-radius: 10px 10px 0px 0px;
}

.reveal .slides section .fragment.highlight-border, .reveal .slides section .fragment.highlight-current-border {
  opacity: 1;
  visibility: visible;
  /* Define a transparent border with the same size for inactive fragments such that we have no size changes when the fragments get displayed */
  border-width: 3px 3px 3px 3px;
  border-style: solid;
  border-color: transparent;
  /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
  margin: -3px;
}
.reveal .slides section .fragment.highlight-border.visible {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: 3px -3px 3px -3px;
}
.reveal .slides section .fragment.highlight-current-border.current-fragment {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.red.current-fragment {
  border: 3px solid #F00;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF #1B91FF #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 10px 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom.current-fragment {
  border-style: solid;
  border-color: #1B91FF #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 10px 10px 0px 0px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 0px 0px;
  margin: -3px;
}


  table.calling_hirarchy {
/*    font-family: monospace, arial, helvetica, sans-serif; */
/*    background-color: #ffffff; */
    font-size: smaller;
    border-collapse: collapse;
    margin: 0px auto;
    padding: 2px;
    width: auto;
    overflow: auto;
    border: none;
  }

  table.calling_hirarchy tr {
    border: none;
  }

  table.calling_hirarchy td {
    padding: 4px;
/*    font-family: monospace; */
  }

  td.indent_level_0 {
    border-style: solid;
    border-width: 2px;
    background-color: #a0a0a0;
  }
  td.indent_level_1 {
    border-style: solid;
    border-width: 2px;
    background-color: #a8a8a8;
  }
  td.indent_level_2 {
    border-style: solid;
    border-width: 2px;
    background-color: #b0b0b0;
  }
  td.indent_level_3 {
    border-style: solid;
    border-width: 2px;
    background-color: #b8b8b8;
  }
  td.indent_level_4 {
    border-style: solid;
    border-width: 2px;
    background-color: #c0c0c0;
  }
  td.indent_level_5 {
    border-style: solid;
    border-width: 2px;
    background-color: #c8c8c8;
  }
  td.indent_level_6 {
    border-style: solid;
    border-width: 2px;
    background-color: #d0d0d0;
  }
  td.indent_level_7 {
    border-style: solid;
    border-width: 2px;
    background-color: #d8d8d8;
  }
  td.indent_level_8 {
    border-style: solid;
    border-width: 2px;
    background-color: #e0e0e0;
  }
  td.indent_level_9 {
    border-style: solid;
    border-width: 2px;
    background-color: #e8e8e8;
  }
  td.indent_level_10 {
    border-style: solid;
    border-width: 2px;
    background-color: #f0f0f0;
  }
  td.indent_level_11 {
    border-style: solid;
    border-width: 2px;
    background-color: #f8f8f8;
  }
  td.indent_level_12 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.functionCall {
/*    font-weight: bold; */
    color: darkblue;
  }
  td.javaCall {
    font-weight: bold;
    color: darkgreen;
  }
  td.comment {
    font-style: italic;
    color: maroon;
  }
  td.highlight {
    border-style: solid;
    border-width: 2px;
    background-color: #a0ffa0;
  }
  table.calling_hirarchy td[rowspan] {
    border-style: none;
    border-width: 0;
    border-left: dotted;
    border-left-width: 2px;
  }

/* The Quiz (background) */
.reveal .slides section .quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz.current-fragment {
    display: block;
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 100px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
}

/* Quiz Content */
.reveal .slides section .quiz-content {
    display: inline-block;
    position: relative;
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: auto;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s
}

/* Add Animation */
@-webkit-keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

@keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

.reveal .slides section .quiz-header {
    padding: 12px 12px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .slides section .quiz-header h2 {
    margin: 0;
}

.reveal .slides section .quiz-body {
    padding: 12px 16px;
    color: #3f3f3f;
}

.reveal .slides section .quiz-body li:not(:last-child) {
    margin-bottom: 15px;
}

.reveal .slides section .quiz-footer {
    padding: 12px 16px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .left-footer {
    display: block;
    position: fixed;
    z-index: 30;
    left: 15px;
    bottom: 15px;
    font-size: 12px;
    color: #eee8d5;
}

ul.before::before {
    content:attr(data-header);
    font-size:120%;
    font-weight:bold;
    margin-left: -2ex;
}
pre.after.small::after {
    content:attr(data-footer);
    font-size: 0.5em;
    font-family: "Roboto Condensed", "sans-serif";
}
    </style>

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'reveal.js/css/print/pdf.css' : 'reveal.js/css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <!--[if lt IE 9]>
    <script src="reveal.js/lib/js/html5shiv.js"></script>
    <![endif]-->

    <!--
      Issue #1105: Keyboard shortcut to skip forward/back over fragments #1173
      https://github.com/hakimel/reveal.js/pull/1173
    -->
  </head>

<!--
;; indent block of text
;; C-u <number> C-x <TAB>



;; select this code and do 'M-x eval-region'
(defun make-fragment (p1 p2)
  "Wraps the selection into 'fragment' <span>s and quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple-index (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\" data-fragment-index=\"1\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple-index-border (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment highlight-current-border\" data-fragment-index=\"1\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun quote-fragment (p1 p2)
  "Quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (delete-region p1 p2)
  (insert inputStr)
)

(global-set-key (kbd "C-f") 'make-fragment)
(global-set-key (kbd "C-S-f") 'make-fragment-simple)
(global-set-key (kbd "C-ö") 'make-fragment-simple-index)
(global-set-key (kbd "C-S-b") 'make-fragment-simple-index-border)
(global-set-key (kbd "C-S-q") 'quote-fragment)
;; revert key-binding
;; (global-set-key (kbd "C-f") 'forward-char)
;;
;; use 'C-h k <keystroke>' to find out what <keystroke> ia currently bound to

;; (vhs) The following is required to make 'C-c C-t' insert <code> tags without
;; newlines. 'sgml-tag-alist' is the "file-local" version of 'html-tag-alist'
(add-to-list 'html-tag-alist '("code"))
(add-to-list 'sgml-tag-alist '("code"))
(add-to-list 'html-tag-alist '("span"))
(add-to-list 'sgml-tag-alist '("span"))


-->

  <body>

    <div class="reveal">

      <div class="left-footer">
        <object data="images/AWS_transparent.png" alt="AWS logo" type="image/png" style="vertical-align: middle; width: 40px; margin: 0 10px 0 0;"/>
        <span>© 2024, Amazon Web Services, Inc. or its affiliates. All rights reserved.</span>
      </div>

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section data-background="images/background_title.jpg" style="text-align: left;">
          <p style="margin-bottom : 6em;"></p>
          <h1>From Java to Native in 80 Cycles</h1>
          <p>
            Volker Simonis (<a href="https://twitter.com/volker_simonis">@volker_simonis</a>)<br/>
            Principal Software Engineer<br/>
            AWS
          </p>
        </section>

        <section data-background="images/background_default.jpg">
          <h2 style="text-transform: none;">
            <a href="https://simonis.github.io/JavaLand2024/" style="color: inherit;">https://simonis.github.io/JavaLand2024/</a>
          </h2>
        </section>

        <section data-background="images/background_default.jpg">
          <h1>About me</h1>

          <ul class="before" data-header="Present:" style="width: 60%;">
            <li>Principal Software Engineer @ Amazon Corretto</li>
            <li>OpenJDK Member, Committer &amp; Reviewer</li>
            <li>OpenJDK Build, Hotspot, Porters &amp; Vulnerability Group</li>
            <li>OpenJDK Governing Board</li>
            <li>Java Community Process Executive Committee</li>
          </ul>

          <ul class="before" data-header="Past:" style="width: 60%;">
            <li>SAP JVM and SapMachine @ SAP</li>
            <li>OpenJDK Build PowerPC/AIX &amp; s390x Project Lead </li>
            <li>JCP Expert Groups for Java SE 9 to 13</li>
          </ul>
        </section>

        <section data-background="images/background_default.jpg" class="demo">
          <h1>Starting with a little anecdote..</h1>

          <br/>
          <div style="width: 100%">
            <div style="float: left; width: 46%">

              <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
                <code class="java" data-trim="true" data-noescape="true" style="height:100%">
  native void emptyNativeMethod();

  @CompilerControl(DONT_INLINE)
  public void emptyMethod() {}

  @Benchmark
  public void methodCalling() {
    emptyMethod();
  }
  @Benchmark
  public void methodCallingNative() {
    emptyNativeMethod();
  }
                </code>
              </pre>

            </div>
            <div style="position:relative; float: right; width: 54%">


              <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
                <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
<span class="fragment" data-fragment-index="1">$ java -jar benchmarks.jar
Benchmark              Score  Units
methodCalling          8.493  ns/op
methodCallingNative   <span class="fragment highlight-current-border" data-fragment-index="5">23.425</span>  ns/op

<span class="fragment" data-fragment-index="3">$ java <span class="fragment highlight-current-border" data-fragment-index="3">-XX:-TieredCompilation</span> -jar ...
Benchmark              Score  Units
methodCalling          8.559  ns/op
methodCallingNative  <span class="fragment highlight-current-border" data-fragment-index="5">123.906</span>  ns/op
</span></span>
                </code>
              </pre>
<!--
Benchmark                       Mode  Cnt   Score   Error  Units
NativeCall.methodCalling        avgt    5   8.493 ± 0.062  ns/op
NativeCall.methodCallingNative  avgt    5  23.425 ± 0.151  ns/op

Benchmark                       Mode  Cnt    Score   Error  Units
NativeCall.methodCalling        avgt    5    8.559 ± 0.255  ns/op
NativeCall.methodCallingNative  avgt    5  123.906 ± 0.418  ns/op
-->
            </div>
          </div>

          <div style="position:relative; float: left; width: 100%">
            <p class="fragment" data-fragment-index="7" style="text-align:left; padding:0 1ex;">
              <a href="https://bugs.openjdk.org/browse/JDK-8329126">
                8329126: No native wrappers generated with -XX:-TieredCompilation after JDK-8251462
              </a>
            </p>
          </div>
        </section>

        <section data-background="images/background_default.jpg" class="demo">
          <h1>Some words on benchmarking..</h1>

          <ul>

            <span class="fragment"><li><a href="https://github.com/openjdk/jmh">Java Micro Harness</a>
                (JMH) is a great tool, but..</li></span>
            <span class="fragment"><li>.. <a href="https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples">read the documentation</a>!!!</li></span>
            <span class="fragment"><li>Know what you do:</li></span>
            <span class="fragment"><li>Use physical, dedicated hardware</li></span>
            <span class="fragment"><li>Use fixed clock speed</li></span>
            <span class="fragment"><li>Turn Hyperthreading off</li></span>
            <span class="fragment"><li>Pin your workload on specific CPUs
                (<a href="https://manpages.ubuntu.com/manpages/focal/en/man1/cset.1.html">cset</a>)</li></span>
            <span class="fragment"><li>Use a fixed Java heap (<code>-Xms</code> == <code>-Xmx</code>)</li></span>
            <span class="fragment"><li>Preallocate memory (<code>-XX:+AlwaysPreTouch</code>)</li></span>
            <span class="fragment"><li>Beware of GC! (<code>-XX:+UseEpsilonGC</code>)</li></span>
            <span class="fragment"><li>Micro- vs. Macro-Benchmarks (use proper statistics)<br/><br/></li></span>
            <span class="fragment"><li>Always verify and <em>triple</em>-check your results!</li></span>
          </ul>
        </section>

        <section data-background="images/background_default.jpg" class="demo">
          <h1><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">JNI</a>
            - the Java Native Interface</h1>

          <ul>
            <li><a href="https://web.archive.org/web/20120626120230/http://java.sun.com/docs/books/jni/html/intro.html#2186">JDK 1.0</a> had a non-standard "<em>Native Method Interface</em>"</li>
            <li><a href="https://web.archive.org/web/20120728074805/http://java.sun.com/docs/books/jni/">JDK 1.1</a>
              introduced the standard JNI</li>
            <li><a href="https://web.archive.org/web/20120626120230/http://java.sun.com/docs/books/jni/html/intro.html#2186">JDK 1.2</a>
              rewrote internal native methods to JNI<br/><br/></li>

            <li>Contains the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html">JNI Invocation API</a>
              <ul>
                <li>Attach to a running JVM</li>
                <li>Create and control a JVM from native code</li>
              </ul><br/>
            </li>

            <li>The basis for the <a href="https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html">
                JVM Tools Interface (JVMTI)</a></li>
          </ul>
        </section>


        <section data-background="images/background_default.jpg" class="demo">
          <h1>A simple example</h1>

          <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
            <code class="java" data-trim="true" data-noescape="true" style="height:100%">
package io.simonis;

public class NativeCall {

  String msg = "Hello ";
  public static native int simple();
  public native void hello(String s);

  static {
    // Load libNativeCall.so from LD_LIBRARY_PATH / -Djava.library.path
    System.loadLibrary("NativeCall");
  }

  public static void main(String[] args) {
    System.out.println(simple());
    new NativeCall().hello("world");
  }
}
            </code>
          </pre>
        </section>


        <section data-background="images/background_default.jpg" class="demo">
          <h1>The Native Side</h1>

          <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
            <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
<span class="fragment fade-out" data-fragment-index="1">$ javac io/simonis/NativeCall.java
$ javah io.simonis.NativeCall                                // JDK &lt;  11</span>
<span class="fragment" data-fragment-index="1">$ javac -h . io/simonis/NativeCall.java                      // JDK &gt;= 11</span>
<span class="fragment" data-fragment-index="3">$ cat io_simonis_NativeCall.h</span>
            </code>
          </pre>

          <pre class="big noshadow fragment" data-fragment-index="4" style="height:100%; margin: 1ex;" data-trim="true">
            <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
// Class:     io_simonis_NativeCall
// Method:    simple
// Signature: ()I
JNIEXPORT
jint JNICALL <span class="fragment highlight-current-border" data-fragment-index="6">Java</span>_<span class="fragment highlight-current-border" data-fragment-index="8">io_simonis_NativeCall</span>_<span class="fragment highlight-current-border" data-fragment-index="10">simple</span>(<span class="fragment highlight-current-border" data-fragment-index="12">JNIEnv</span>*, <span class="fragment highlight-current-border" data-fragment-index="14">jclass</span>);

// Class:     io_simonis_NativeCall
// Method:    hello
// Signature: (Ljava/lang/String;)V
JNIEXPORT
void JNICALL <span class="fragment highlight-current-border" data-fragment-index="6">Java</span>_<span class="fragment highlight-current-border" data-fragment-index="8">io_simonis_NativeCall</span>_<span class="fragment highlight-current-border" data-fragment-index="10">hello</span>(<span class="fragment highlight-current-border" data-fragment-index="12">JNIEnv</span>*, <span class="fragment highlight-current-border" data-fragment-index="16">jobject</span>, jstring);
            </code>
          </pre>

          <p class="fragment" style="text-align:center; padding:0 1ex;">
            Use
            <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html#JNJI_OnLoad">
              <code>JNI_OnLoad()</code></a>/<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#registering_native_methods">
              <code>RegisterNatives()</code></a> if you don't like the name mangling :)
          </p>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
#include &lt;jni.h&gt;
#include "io_simonis_NativeCall.h"

extern "C" JNIEXPORT
jint JNICALL Java_io_simonis_NativeCall_simple(JNIEnv* env, jclass cls) {
  return 42;
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
extern "C" JNIEXPORT
void JNICALL Java_io_simonis_NativeCall_hello(JNIEnv* env, jobject self, jstring s) {
  <span class="fragment">jclass myClass = env->GetObjectClass(self);</span>
  <span class="fragment">jfieldID msgID = env->GetFieldID(myClass, "msg", "Ljava/lang/String;");</span>
  <span class="fragment">jobject msg = env->GetObjectField(self, msgID);</span>
  <span class="fragment">jclass system = env->FindClass("java/lang/System");</span>
  <span class="fragment">jfieldID outID = env->GetStaticFieldID(system, "out", "Ljava/io/PrintStream;");</span>
  <span class="fragment">jobject out = env->GetStaticObjectField(system, outID);</span>
  <span class="fragment">jclass printStream = env->FindClass("java/io/PrintStream");</span>
  <span class="fragment">jmethodID print = env->GetMethodID(printStream, "print", "(Ljava/lang/String;)V");</span>
  <span class="fragment">jmethodID println = env->GetMethodID(printStream, "println", "()V");</span>
  <span class="fragment">env->CallVoidMethod(out, print, msg);</span>
  <span class="fragment">env->CallVoidMethod(out, print, s);</span>
  <span class="fragment">env->CallVoidMethod(out, println);</span>
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ g++ -I $JAVA_HOME/include/ -I $JAVA_HOME/include/linux/ \
      -shared -o <span class="fragment highlight-current-border">libNativeCall.so</span> NativeCall.cpp
<span class="fragment">
$ java io.simonis.NativeCall
Exception in thread "main" java.lang.<span class="fragment highlight-current-border">UnsatisfiedLinkError</span>:
  no NativeCall in java.library.path:
  /usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib
	at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2458)
	at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:916)
	at java.base/java.lang.System.loadLibrary(System.java:2059)
	at io.simonis.NativeCall.&lt;clinit&gt;(NativeCall.java:11)
</span>
<span class="fragment">$ java <mark class="border">-Djava.library.path=./</mark> io.simonis.NativeCall
42
Hello world</span>
              </code>
            </pre>

            <p class="fragment" style="text-align:center; padding:0 1ex;">
              There&apos;s a lot that can go wrong!
              <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/clopts002.html">
                <code>-Xcheck:jni</code> </a> is your friend :)
            </p>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java <mark class="border">-Xcheck:jni</mark> -Djava.library.path=./ io.simonis.NativeCall
<span class="fragment">42
Hello
WARNING in native method: JNI call made without checking \
  exceptions when required to from CallVoidMethodV
	at io.simonis.NativeCall.hello(Native Method)
	at io.simonis.NativeCall.main(NativeCall.java:16)
world
WARNING in native method: JNI call made without checking \
  exceptions when required to from CallVoidMethodV
	at io.simonis.NativeCall.hello(Native Method)
	at io.simonis.NativeCall.main(NativeCall.java:16)</span> 
              </code>
            </pre>
          </section>

        </section>

        <!-- NOTICE: 'style="height: 100%;"' here and in the sub-sections IS CRUCIAL to get scrolling in <code> sections!!! -->
        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section class="center">
            <h1>Demo - Native Call Stack</h1>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ LD_LIBRARY_PATH=./ jdb io.simonis.NativeCall
&gt; stop at java.io.FileOutputStream.write(byte[],int,int)
&gt; run
Breakpoint hit: "thread=main", java.io.FileOutputStream.write(), line=366 bci=0

main[1] where
  [1] java.io.FileOutputStream.write (FileOutputStream.java:366)
  [2] java.io.BufferedOutputStream.flushBuffer (BufferedOutputStream.java:125)
  [3] java.io.BufferedOutputStream.implFlush (BufferedOutputStream.java:252)
  [4] java.io.BufferedOutputStream.flush (BufferedOutputStream.java:240)
  [5] java.io.PrintStream.implWrite (PrintStream.java:649)
  [6] java.io.PrintStream.write (PrintStream.java:627)
  [7] sun.nio.cs.StreamEncoder.writeBytes (StreamEncoder.java:291)
  [8] sun.nio.cs.StreamEncoder.implFlushBuffer (StreamEncoder.java:386)
  [9] sun.nio.cs.StreamEncoder.lockedFlushBuffer (StreamEncoder.java:117)
  [10] sun.nio.cs.StreamEncoder.flushBuffer (StreamEncoder.java:104)
  [11] java.io.OutputStreamWriter.flushBuffer (OutputStreamWriter.java:194)
  [12] java.io.PrintStream.implWriteln (PrintStream.java:853)
  [13] java.io.PrintStream.writeln (PrintStream.java:830)
  [14] java.io.PrintStream.println (PrintStream.java:1,082)
  [15] io.simonis.NativeCall.main (NativeCall.java:15)
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
main[1] cont
42
Breakpoint hit: "thread=main", java.io.FileOutputStream.write(), line=366 bci=0

main[1] where
  [1] java.io.FileOutputStream.write (FileOutputStream.java:366)
  [2] java.io.BufferedOutputStream.flushBuffer (BufferedOutputStream.java:125)
  [3] java.io.BufferedOutputStream.implFlush (BufferedOutputStream.java:252)
  [4] java.io.BufferedOutputStream.flush (BufferedOutputStream.java:240)
  [5] java.io.PrintStream.implWrite (PrintStream.java:649)
  [6] java.io.PrintStream.write (PrintStream.java:627)
  [7] sun.nio.cs.StreamEncoder.writeBytes (StreamEncoder.java:291)
  [8] sun.nio.cs.StreamEncoder.implFlushBuffer (StreamEncoder.java:386)
  [9] sun.nio.cs.StreamEncoder.lockedFlushBuffer (StreamEncoder.java:117)
  [10] sun.nio.cs.StreamEncoder.flushBuffer (StreamEncoder.java:104)
  [11] java.io.OutputStreamWriter.flushBuffer (OutputStreamWriter.java:194)
  [12] java.io.PrintStream.implWrite (PrintStream.java:816)
  [13] java.io.PrintStream.write (PrintStream.java:794)
  [14] java.io.PrintStream.print (PrintStream.java:1,006)
  [15] io.simonis.NativeCall.hello (native method)
  [16] io.simonis.NativeCall.main (NativeCall.java:16)
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ LD_LIBRARY_PATH=./ gdb java
(gdb) run io.simonis.NativeCall
Thread 2 "java" received signal SIGSEGV, Segmentation fault.
(gdb) b writeBytes
Breakpoint 1 at 0x7ffff4fe580c: file ../io_util.c, line 148.
(gdb) cont
Thread 2 "java" hit Breakpoint 1, writeBytes(..) at ../io_util.c:148
(gdb) where
#0  writeBytes (..) at ../io_util.c:148
#1  0x00007ffff4fd9c6b in Java_java_io_FileOutputStream_writeBytes(..) at ..
#2  0x00007fffdfb4610e in ?? ()
#3  0x0000000000000008 in ?? ()
#4  0x00007ffff002c0dc in ?? ()
#5  0x00007ffff7d440af in ?? ()
#6  0x00007fff6a014628 in ?? ()
#7  0x00007fffdfb45afc in ?? ()
#8  0xfffffffffffffff7 in ?? ()
#9  0x00007fff6edcd4c0 in ?? ()
#10 0x0000000000000008 in ?? ()
#11 0x00007fff6e554078 in ?? ()
#12 0x0000000000000000 in ?? ()
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
(gdb) call pns($sp, $rbp, $pc)
"Executing pns"
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjava.so+0x1c80c]  writeBytes+0x5a
C  [libjava.so+0x10c6b]  Java_java_io_FileOutputStream_writeBytes+0x60
j  java.io.FileOutputStream.writeBytes([BIIZ)V+0 java.base@23-internal
j  java.io.FileOutputStream.write([BII)V+25 java.base@23-internal
j  java.io.BufferedOutputStream.flushBuffer()V+20 java.base@23-internal
j  java.io.BufferedOutputStream.implFlush()V+1 java.base@23-internal
j  java.io.BufferedOutputStream.flush()V+15 java.base@23-internal
j  java.io.PrintStream.implWrite([BII)V+25 java.base@23-internal
j  java.io.PrintStream.write([BII)V+18 java.base@23-internal
j  sun.nio.cs.StreamEncoder.writeBytes()V+81 java.base@23-internal
j  sun.nio.cs.StreamEncoder.implFlushBuffer()V+11 java.base@23-internal
j  sun.nio.cs.StreamEncoder.lockedFlushBuffer()V+8 java.base@23-internal
j  sun.nio.cs.StreamEncoder.flushBuffer()V+22 java.base@23-internal
j  java.io.OutputStreamWriter.flushBuffer()V+4 java.base@23-internal
j  java.io.PrintStream.implWriteln(Ljava/lang/String;)V+30 java.base@23-internal
j  java.io.PrintStream.writeln(Ljava/lang/String;)V+16 java.base@23-internal
j  java.io.PrintStream.println(I)V+14 java.base@23-internal
j  io.simonis.NativeCall.main([Ljava/lang/String;)V+6
v  ~StubRoutines::call_stub 0x00007fffdfb37d21
V  [libjvm.so+0xdcbfdd]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x60b
V  [libjvm.so+0x12fec92]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3a
V  [libjvm.so+0xdcb9ce]  JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3e
V  [libjvm.so+0xeb4770]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*)+0x1a7
V  [libjvm.so+0xec2f88]  jni_CallStaticVoidMethod+0x1e6
C  [libjli.so+0x54d2]  invokeStaticMainWithArgs+0xb5
C  [libjli.so+0x64d2]  JavaMain+0xbc1
C  [libjli.so+0xc65f]  ThreadJavaMain+0x2b
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
(gdb) cont
Thread 2 "java" hit Breakpoint 1, writeBytes(..) at ../io_util.c:148
gdb) call pns($sp, $rbp, $pc)
"Executing pns"
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjava.so+0x1c80c]  writeBytes+0x5a
C  [libjava.so+0x10c6b]  Java_java_io_FileOutputStream_writeBytes+0x60
j  java.io.FileOutputStream.writeBytes([BIIZ)V+0 java.base@23-internal
j  java.io.FileOutputStream.write([BII)V+25 java.base@23-internal
j  java.io.BufferedOutputStream.flushBuffer()V+20 java.base@23-internal
j  java.io.BufferedOutputStream.implFlush()V+1 java.base@23-internal
j  java.io.BufferedOutputStream.flush()V+15 java.base@23-internal
j  java.io.PrintStream.implWrite([BII)V+25 java.base@23-internal
j  java.io.PrintStream.write([BII)V+18 java.base@23-internal
j  sun.nio.cs.StreamEncoder.writeBytes()V+81 java.base@23-internal
j  sun.nio.cs.StreamEncoder.implFlushBuffer()V+11 java.base@23-internal
j  sun.nio.cs.StreamEncoder.lockedFlushBuffer()V+8 java.base@23-internal
j  sun.nio.cs.StreamEncoder.flushBuffer()V+22 java.base@23-internal
j  java.io.OutputStreamWriter.flushBuffer()V+4 java.base@23-internal
j  java.io.PrintStream.implWrite(Ljava/lang/String;)V+23 java.base@23-internal
j  java.io.PrintStream.write(Ljava/lang/String;)V+16 java.base@23-internal
j  java.io.PrintStream.print(Ljava/lang/String;)V+5 java.base@23-internal
v  ~StubRoutines::call_stub 0x00007fffdfb37d21
V  [libjvm.so+0xdcbfdd]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x60b
V  [libjvm.so+0x12fec92]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3a
V  [libjvm.so+0xdcb9ce]  JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3e
V  [libjvm.so+0xeb4cba]  jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*)+0x47b
V  [libjvm.so+0xeba460]  jni_CallVoidMethodV+0x177
C  [libNativeCall.so+0x151b]  JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...)+0xcf
C  [libNativeCall.so+0x1368]  Java_io_simonis_NativeCall_hello+0x138
j  io.simonis.NativeCall.hello(Ljava/lang/String;)V+0
j  io.simonis.NativeCall.main([Ljava/lang/String;)V+18
v  ~StubRoutines::call_stub 0x00007fffdfb37d21
V  [libjvm.so+0xdcbfdd]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x60b
V  [libjvm.so+0x12fec92]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3a
V  [libjvm.so+0xdcb9ce]  JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3e
V  [libjvm.so+0xeb4770]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*)+0x1a7
V  [libjvm.so+0xec2f88]  jni_CallStaticVoidMethod+0x1e6
C  [libjli.so+0x54d2]  invokeStaticMainWithArgs+0xb5
C  [libjli.so+0x64d2]  JavaMain+0xbc1
C  [libjli.so+0xc65f]  ThreadJavaMain+0x2b
              </code>
            </pre>
          </section>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">
            <h1>The JNI Invocation API</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
#include &lt;stdio.h&gt;
#include "jni.h"

int main(int argc, char** argv) {
  JavaVM *jvm;
  JNIEnv *env;
  JavaVMInitArgs vm_args;
  vm_args.version = JNI_VERSION_1_8;
  vm_args.nOptions = 0;
  int ret =<span class="fragment highlight-current-border" data-fragment-index="1"> JNI_CreateJavaVM(&amp;jvm, (void**)&amp;env, &amp;vm_args)</span>;
  jclass cls = <span class="fragment highlight-current-border" data-fragment-index="2">env-&gt;FindClass("io/simonis/NativeCall")</span>;
  jmethodID simple = <span class="fragment highlight-current-border" data-fragment-index="3">env-&gt;GetStaticMethodID(cls, "simple", "()I")</span>;
  printf("%d\n",<span class="fragment highlight-current-border" data-fragment-index="4"> env-&gt;CallStaticIntMethod(cls, simple)</span>);
  jvm-&gt;DestroyJavaVM();
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>The JNI Invocation API</h1>

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ g++ <span class="fragment highlight-current-border" data-fragment-index="1">-I $JAVA_HOME/include/ -I $JAVA_HOME/include/linux/</span> \
      <span class="fragment highlight-current-border" data-fragment-index="2">-L $JAVA_HOME/lib/server</span> -o java java.cpp <span class="fragment highlight-current-border" data-fragment-index="2">-ljvm</span>
<span class="fragment" data-fragment-index="3">
$ <span class="fragment highlight-current-border" data-fragment-index="5">JAVA_TOOL_OPTIONS=-Xlog:gc*</span> \
  <span class="fragment highlight-current-border" data-fragment-index="4">LD_LIBRARY_PATH=$JAVA_HOME/lib/server</span> ./java
Picked up JAVA_TOOL_OPTIONS: -Xlog:gc*
[0.006s][info][gc] Using G1
[0.010s][info][gc,init] Version: 17.0.9+8-LTS (release)
<span class="fragment highlight-current-border" data-fragment-index="6">42</span></span>
              </code>
            </pre>
          </section>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">
            <h1>What happens at a native call?</h1>

            <ul>
              <li class="fragment">Register shuffling for native calling conventions
                <ul>
                  <li>Add <code>JNIEnv</code> (and <code>jclass</code> for static methods) arguments</li>
                </ul>
              </li>
              <li class="fragment">Wrap non-primitive types in <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#global_and_local_references"><code>JNIHandles</code></a>
                <ul>
                  <li><a href="">Local References</a> / <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#global_references">Global References</a></li>
                </ul>
              </li>
              <li class="fragment">Transition <a href="https://github.com/openjdk/jdk/blob/040c93565c0dff6270911eb9e58d78aa01bbb925/src/hotspot/share/utilities/globalDefinitions.hpp#L984-L1013">thread state</a> from <code>in_Java</code> to <code>in_native</code></li>
              <li class="fragment">Do the actual call</li>
              <li class="fragment">Transition <a href="https://github.com/openjdk/jdk/blob/040c93565c0dff6270911eb9e58d78aa01bbb925/src/hotspot/share/utilities/globalDefinitions.hpp#L984-L1013">thread state</a> from <code>in_native</code> to <code>in_Java</code></li>
              <li class="fragment">Unwrap and clean-up <code>JNIHandles</code></li>
              <li class="fragment">Check for pending exceptions</li>
              <li class="fragment">Check for a <a href="https://simonis.github.io/hotspot_internals/hotspot_internals.xhtml">Safepoint</a></li>
            </ul>
          </section>


          <section data-background="images/background_default.jpg" class="demo">
            <h1>Calling Conventions</h1>

            <ul>
              <li>The Interpreter <a href="https://github.com/openjdk/jdk/blob/21867c929a2f2c961148f2cd1e79d672ac278d27/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp#L67">passes all arguments on the stack</a>
              </li>
              <li><a href="https://github.com/openjdk/jdk/blob/21867c929a2f2c961148f2cd1e79d672ac278d27/src/hotspot/cpu/x86/assembler_x86.hpp#L97">Comiled Calling Conventions</a> are a shifted version of the Native CC</li>
            </ul>
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
------|---------------------------------------------------
  C   | <span class="fragment highlight-current-border" data-fragment-index="1">c_rarg0</span>   <span class="fragment highlight-current-border" data-fragment-index="2">c_rarg1</span>  c_rarg2 c_rarg3 c_rarg4 c_rarg5
------|---------------------------------------------------
Win32 | rcx       rdx      r8      r9      rdi*    rsi*
Sys V | rdi       rsi      rdx     rcx     r8      r9
------|---------------------------------------------------
Java  | j_rarg5   <span class="fragment highlight-current-border" data-fragment-index="1">j_rarg0</span>  <span class="fragment highlight-current-border" data-fragment-index="2">j_rarg1</span> j_rarg2 j_rarg3 j_rarg4
------|---------------------------------------------------
              </code>
            </pre>
            <ul>
              <li class="fragment">Allows calling native methods without argument shuffling (<code>JNIEnv*</code>)</li>
              <li class="fragment">Static native methods requier an extra slot for the <code>jclass</code> argument</li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Accessing the Java heap from Native</h1>

            <ul>
              <li>Java objects anly accessible through references (GC-safe)</li>
              <li>Too slow for primitive array data:
                <ol class="fragment">
                  <li>Copy array data -> safe but slow</li>
                  <li>Block GC (<a href="https://shipilev.net/jvm/anatomy-quarks/9-jni-critical-gclocker/"><code>GCLocker</code></a>)
                    -> fast but dangerous</li>
                  <li>Pin object/region -> fast and safe
                    <ul class="fragment">
                      <li>Only Shenandoah</li>
                      <li>..and G1 since JDK 22 (<a href="https://bugs.openjdk.org/browse/JDK-8276094">JEP 423: Region Pinning for G1</a>)</li>
                    </ul>
                  </li>
                </ol>
              </li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true" style="height:100%">
public class NativeCallGC {

  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="1">public static native void block(int sec);                     </span>
  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="1">public static native void elements(byte[] b, int sec);        </span>
  <span class="fragment highlight-current-border border-no-top" data-fragment-index="1">public static native void elementsCritical(byte[] b, int sec);</span>

  public static void main(String[] args) throws Exception {
    <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="3">new Thread() {                                                      </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">  public void run() {                                               </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">    while(true) {                                                   </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">      try { Thread.sleep(1_000); } catch (InterruptedException e) {}</span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">      System.gc();                                                  </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">    }                                                               </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">  }                                                                 </span>
    <span class="fragment highlight-current-border border-no-top" data-fragment-index="3">}.start();                                                          </span>
    <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="5">int sec = Integer.parseInt(args[1]);                        </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">byte[] b = new byte[42];                                    </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">switch (args[0]) {                                          </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">  case "block" : block(sec); break;                         </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">  case "elements" : elements(b, sec); break;                </span>
    <span class="fragment highlight-current-border border-no-top" data-fragment-index="5">  case "elementsCritical" : elementsCritical(b, sec); break;</span>
              </code>
            </pre>

          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
void block(JNIEnv* env, jclass cls, jint s) {
  sleep(s);
}

void elements(JNIEnv* env, jclass cls, jbyteArray b, jint s) {
  jboolean copy;
  jbyte* jb = (jbyte*)<span class="fragment highlight-current-border" data-fragment-index="1">env-&gt;GetByteArrayElements(b, &amp;copy)</span>;
  printf("GetByteArrayElements() returned %s\n", <span class="fragment highlight-current-border" data-fragment-index="2">copy ? "copy":"original"</span>);
  sleep(s);
  env-&gt;ReleaseByteArrayElements(b, jb, copy ? JNI_ABORT : 0);
}

void elementsCritical(JNIEnv* env, jclass cls, jbyteArray b, jint s) {
  jboolean copy;
  jbyte* jb = (jbyte*)<span class="fragment highlight-current-border" data-fragment-index="3">env-&gt;GetPrimitiveArrayCritical(b, &amp;copy)</span>;
  printf("GetPrimitiveArrayCritical() returned %s\n", copy ? "copy":"original");
  sleep(s);
  env-&gt;ReleasePrimitiveArrayCritical(b, jb, copy ? JNI_ABORT : 0);
}
              </code>
            </pre>

          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
jint JNI_OnLoad(JavaVM *vm, void *reserved) {
  JNIEnv* env;
  vm-&gt;GetEnv((void**)&amp;env, JNI_VERSION_1_8);
  jclass cls = <span class="fragment highlight-current-border" data-fragment-index="1">env-&gt;FindClass("io/simonis/NativeCallGC")</span>;
  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="2">static JNINativeMethod methods[] = {                       </span>
  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="2">  {"block", "(I)V", (void*)&amp;block},                        </span>
  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="2">  {"elements", "([BI)V", (void*)&amp;elements},                </span>
  <span class="fragment highlight-current-border border-no-top" data-fragment-index="2">  {"elementsCritical", "([BI)V", (void*)&amp;elementsCritical},</span>
  };
  <span class="fragment highlight-current-border" data-fragment-index="3">env-&gt;RegisterNatives(cls, methods, 3)</span>;
  return JNI_VERSION_1_8;
}
              </code>
            </pre>

          </section>

          <section class="center">
            <h1>Demo - <code>GCLocker</code></h1>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

            <pre class="big noshadow" style="height:101%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java -Djava.library.path=examples/cpp/ -Xlog:gc -showversion \
       -cp examples/java/ io.simonis.NativeCallGC block 3
<span class="fragment">[0.006s][info][gc] Using G1
openjdk version "21" 2023-09-19 LTS
[1,058s][info][gc] GC(0) Pause Full (System.gc()) 2M->1M(28M) 9,267ms
[2,064s][info][gc] GC(1) Pause Full (System.gc()) 1M->1M(16M) 6,033ms
[3,070s][info][gc] GC(2) Pause Full (System.gc()) 1M->1M(16M) 5,804ms
$</span><span class="fragment"> java -Djava.library.path=examples/cpp/ -Xlog:gc -showversion \
       -cp examples/java/ io.simonis.NativeCallGC elements 3</span>
<span class="fragment">[0.006s][info][gc] Using G1
openjdk version "21" 2023-09-19 LTS
<span class="fragment highlight-current-border">GetByteArrayElements() returned copy</span>
[1,058s][info][gc] GC(0) Pause Full (System.gc()) 2M->1M(28M) 9,673ms
[2,064s][info][gc] GC(1) Pause Full (System.gc()) 1M->1M(16M) 6,158ms
[3,070s][info][gc] GC(2) Pause Full (System.gc()) 1M->1M(16M) 5,701ms
$</span><span class="fragment"> java -Djava.library.path=examples/cpp/ -Xlog:gc -showversion \
       -cp examples/java/ io.simonis.NativeCallGC elementsCritcal 3</span>
<span class="fragment">[0.006s][info][gc] Using G1
openjdk version "21" 2023-09-19 LTS
<span class="fragment highlight-current-border">GetPrimitiveArrayCritical() returned original</span>
[3,048s][info][gc] GC(0) Pause Young (Normal) <span class="fragment highlight-current-border">(GCLocker Initiated GC)</span> 2M->1M(504M) 1,218ms
[3,056s][info][gc] GC(1) Pause Full (System.gc()) 1M->1M(16M) 8,099ms</span>
              </code>
            </pre>

          </section>
        </section>


        <section data-background="images/background_last.jpg">
          <h2 style="text-transform: none;">
            <a href="https://simonis.github.io/JavaLand2024/" style="color: inherit;">https://simonis.github.io/JavaLand2024/</a>
          </h2>
        </section>

      </div>

    </div>


    <script src="reveal.js/lib/js/head.min.js"></script>
    <script src="reveal.js/js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        //width: 1024,
        //height: 768,
        //width: 1280,
        //height: 720,
        //width: 1366,
        //height: 768,
        width: 1920,
        height: 1080,
        margin: 0.1,
        controls: true,
        progress: true,
        history: true,
        center: true,
        slideNumber: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() {

hljs.registerLanguage('terminal', function(hljs) {
  return {
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      {
        className: 'title',
        lexemes: /[$()>_a-zA-Z0-9\]\[]+/,
        keywords: "$ (gdb) hsdb> main[1] >",
        begin: /^\$ |\(gdb\)|hsdb> |main\[1\] |> /,
        end: /[^\\]\n/,
	contains: [
          hljs.COMMENT('//', '$', { endsParent: true })
	]
      }
    ]
  }
});

hljs.initHighlightingOnLoad(); } },
          { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true },
          { src: 'reveal.js/plugin/notes/notes.js', async: true }
        ]
      });

      //Reveal.configure({ slideNumber: true });



<![CDATA[

      // This function was adapted from:
      // Titus Cieslewski (https://stackoverflow.com/users/796329/titus-cieslewski) and
      // Dan Harper (https://stackoverflow.com/users/148975/danharper) from:
      // https://stackoverflow.com/questions/808826/draw-arrow-on-canvas-tag
      function canvas_arrow(context, fromx, fromy, tox, toy){
        var headlen = 10;   // length of head in pixels
        var angle = Math.atan2(toy-fromy,tox-fromx);
        context.lineCap = 'round';
        context.moveTo(fromx, fromy);
        context.lineTo(tox, toy);
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle-Math.PI/6),toy-headlen*Math.sin(angle-Math.PI/6));
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle+Math.PI/6),toy-headlen*Math.sin(angle+Math.PI/6));
      }

      function drawArrow(canvas, from, target, color) {
        var ctx = canvas.getContext("2d");
        ctx.lineWidth = 3;
        ctx.strokeStyle= color;
        var x1, y1, x2, y2;
        if ((from.offsetTop + from.offsetHeight) < (target.offsetTop)) {
          // 'from' above 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft;
            y2 = target.offsetTop;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop;
          }
        }
        else if ((from.offsetTop) > (target.offsetTop + target.offsetHeight)) {
          // 'from' below 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop;
            x2 = target.offsetLeft;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop + target.offsetHeight;
          }
        }
        else if ((from.offsetLeft) < (target.offsetLeft)) {
          // 'from' feft of 'target'
          x1 = from.offsetLeft + from.offsetWidth;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        else {
          // 'from' right of 'target'
          x1 = from.offsetLeft;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft + target.offsetWidth;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        //ctx.bezierCurveTo(30,60,40,100, 50,120);
        ctx.lineTo(x2, y2);
        canvas_arrow(ctx, x1, y1, x2, y2);
        ctx.stroke();
      }

      function handleFragmentEvent(fragments, current, show) {
        var code = current.parentNode;
        var firstArrow = true;
        var fragmentShown = false;

        var canvas, canvases = code.getElementsByTagName("canvas");
        if (canvases.length != 0) {
          canvas = canvases[0];
          canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
        }
        fragments.forEach(function(fragment, i) {
          if (show === false && current === fragment) fragmentShown = true;
          var cll = fragment.classList;
          if (((cll.contains("highlight-border") && !fragmentShown) ||
               (cll.contains("highlight-current-border") && cll.contains("current-fragment"))) &&
              fragment.hasAttribute("arrow-to")) {

            var target = document.getElementById(fragment.getAttribute("arrow-to"));
            if (canvases.length === 0) {
              canvas = document.createElement("canvas");
              // Place the canvas right over the parent node ..
              canvas.style.position= 'absolute';
              canvas.style.zIndex= '100';
              canvas.style.top= '0px';
              canvas.style.left= '0px';
              // .. and make it the same size.
              canvas.style.width= code.offsetWidth + 'px';
              canvas.style.height= code.offsetHeight + 'px';
              // Make the canvas bounding box (i.e. canvas' css dimensions)
              // and the canvas logical size be the same. That way we don't
              // have to convert between the two coordinate systems of the
              // elemnts on the overlaying DOM element and the canvas.
              canvas.width= code.offsetWidth;
              canvas.height= code.offsetHeight;
              code.appendChild(canvas);
            }
            drawArrow(canvas, fragment, target, "#1b91ff");
          }
          if (show === true && current === fragment) fragmentShown = true;
        });
      }

      Reveal.addEventListener('fragmenthidden', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[0], false);
      });

      Reveal.addEventListener('fragmentshown', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[event.fragments.length - 1], true);
      });


]]>
    </script>

  </body>
</html>

<!--  LocalWords:  zlib OpenJDK scrollable px pre hljs noshadow fff
 -->
<!--  LocalWords:  elemnts hirarchy monospace arial helvetica ffffff
 -->
<!--  LocalWords:  td functionCall darkblue javaCall darkgreen ffa cb
 -->
<!--  LocalWords:  rowspan fefefe rgba webkit animatetop keyframes li
 -->
<!--  LocalWords:  eee attr Roboto eval defun setq inputStr substring
 -->
<!--  LocalWords:  resultStr concat kbd ia vhs JNI JDK Changelog CRC
 -->
<!--  LocalWords:  intrinsification Redestad lookups LZ abaca ecb LZZ
 -->
<!--  LocalWords:  aecb daecb mozilla xml aarch MacOSX CVE MacOS ASM
 -->
<!--  LocalWords:  readCount InflaterInputStream cloudflare LFH CFH
 -->
<!--  LocalWords:  src ZipOutputStream putNextEntry ZipEntry's vers
 -->
<!--  LocalWords:  GZIP Gzip infgen
 -->
