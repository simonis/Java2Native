<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta charset="utf-8" />

    <title>From Java to Native in 80 Cycles</title>

    <meta name="description" content="From Java to Native in 80 Cycles" />
    <meta name="author" content="Volker H. Simonis" />

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui" />

    <link rel="stylesheet" href="reveal.js/css/reveal.css" />
    <link rel="stylesheet" href="reveal.js/css/theme/joker2017.css" id="theme" />

    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="reveal.js/lib/css/monokai_sublime.css" />

    <style type="text/css">
/* display preprocessor directives italic (could also handle 'hljs-meta-keyword' (for "include" and 'hljs-meta-string' for the inlcude file in the future) */
.hljs-meta {
  color: #7571ff;
  font-style: italic;
}

.scrollable {
    bottom: 0px;
    overflow-y: auto  !important;
    overflow-x: hidden !important;
}

.reveal {
    color: #c1d2d2;
}

.reveal .slides > section.demo,
.reveal .slides > section > section.demo {
    padding: 0;
}

.reveal .big {
    font-size: .8em;
    line-height: 1.3em;
}

.reveal pre.console {
    background-color: black;
    color: #00ff00;
}

code.terminal .hljs-title {
    color: #00ff00;
}

/* Used for styling command lines in a 'java' code block */
code.java .hljs-title-terminal {
    color: #00ff00;
}

.reveal pre.noshadow {
    border-radius: 0;
    box-shadow: unset;
}

.reveal pre code {
    max-height: 100%;
}
.bold {
    font-weight: bold;
}

.reveal .outline_white {
    color: white;
    text-shadow:
        -2px -2px 0 #000,
         2px -2px 0 #000,
        -2px  2px 0 #000,
         2px  2px 0 #000;
    min-height: 1.1em;
    text-align: center;
}
.reveal .outline_black {
    color: black;
    text-shadow:
        -2px -2px 0 #fff,
         2px -2px 0 #fff,
        -2px  2px 0 #fff,
         2px  2px 0 #fff;
    min-height: 1.1em;
    text-align: center;
}

.reveal .slide-number {
    position: fixed;
    display: block;
    left: 15px;
    bottom: 15px;
    opacity: 0.9;
    z-index: 31;
    font-size: 14px;
    text-align: center;
}
.reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 {
    text-transform: none;
}

.hljs-class .hljs-title {
    /* fix "public static class Y extends X {" such that 'Y' will be formatted the same like 'X' */
    color: #A6E22E;
    font-style: italic;
}

mark {
    color: black;
    background-color: lightyellow;
    border-radius: 10px;
}
mark.orange {
    color: black;
    background-color: orange;
    border-radius: 10px;
}
mark.border {
    color: inherit;
    background-color: inherit;
    border: 3px solid #1B91FF;
    /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
    margin: 0 -5px 0 -5px;
    border-radius: 10px;
}
mark.border-no-top {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 0px 3px 3px 3px;
    border-radius: 0px 0px 10px 10px;
}
mark.border-no-bottom {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 3px 3px 0px 3px;
    border-radius: 10px 10px 0px 0px;
}

.reveal .slides section .fragment.highlight-border, .reveal .slides section .fragment.highlight-current-border {
  opacity: 1;
  visibility: visible;
  /* Define a transparent border with the same size for inactive fragments such that we have no size changes when the fragments get displayed */
  border-width: 3px 3px 3px 3px;
  border-style: solid;
  border-color: transparent;
  /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
  margin: -3px;
}
.reveal .slides section .fragment.highlight-border.visible {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: 3px -3px 3px -3px;
}
.reveal .slides section .fragment.highlight-current-border.current-fragment {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.red.current-fragment {
  border: 3px solid #F00;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF #1B91FF #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 10px 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom.current-fragment {
  border-style: solid;
  border-color: #1B91FF #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 10px 10px 0px 0px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 0px 0px;
  margin: -3px;
}


  table.calling_hirarchy {
/*    font-family: monospace, arial, helvetica, sans-serif; */
/*    background-color: #ffffff; */
    font-size: smaller;
    border-collapse: collapse;
    margin: 0px auto;
    padding: 2px;
    width: auto;
    overflow: auto;
    border: none;
  }

  table.calling_hirarchy tr {
    border: none;
  }

  table.calling_hirarchy td {
    padding: 4px;
/*    font-family: monospace; */
  }

  td.indent_level_0 {
    border-style: solid;
    border-width: 2px;
    background-color: #a0a0a0;
  }
  td.indent_level_1 {
    border-style: solid;
    border-width: 2px;
    background-color: #a8a8a8;
  }
  td.indent_level_2 {
    border-style: solid;
    border-width: 2px;
    background-color: #b0b0b0;
  }
  td.indent_level_3 {
    border-style: solid;
    border-width: 2px;
    background-color: #b8b8b8;
  }
  td.indent_level_4 {
    border-style: solid;
    border-width: 2px;
    background-color: #c0c0c0;
  }
  td.indent_level_5 {
    border-style: solid;
    border-width: 2px;
    background-color: #c8c8c8;
  }
  td.indent_level_6 {
    border-style: solid;
    border-width: 2px;
    background-color: #d0d0d0;
  }
  td.indent_level_7 {
    border-style: solid;
    border-width: 2px;
    background-color: #d8d8d8;
  }
  td.indent_level_8 {
    border-style: solid;
    border-width: 2px;
    background-color: #e0e0e0;
  }
  td.indent_level_9 {
    border-style: solid;
    border-width: 2px;
    background-color: #e8e8e8;
  }
  td.indent_level_10 {
    border-style: solid;
    border-width: 2px;
    background-color: #f0f0f0;
  }
  td.indent_level_11 {
    border-style: solid;
    border-width: 2px;
    background-color: #f8f8f8;
  }
  td.indent_level_12 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.functionCall {
/*    font-weight: bold; */
    color: darkblue;
  }
  td.javaCall {
    font-weight: bold;
    color: darkgreen;
  }
  td.comment {
    font-style: italic;
    color: maroon;
  }
  td.highlight {
    border-style: solid;
    border-width: 2px;
    background-color: #a0ffa0;
  }
  table.calling_hirarchy td[rowspan] {
    border-style: none;
    border-width: 0;
    border-left: dotted;
    border-left-width: 2px;
  }

/* The Quiz (background) */
.reveal .slides section .quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz.current-fragment {
    display: block;
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 100px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
}

/* Quiz Content */
.reveal .slides section .quiz-content {
    display: inline-block;
    position: relative;
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: auto;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s
}

/* Add Animation */
@-webkit-keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

@keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

.reveal .slides section .quiz-header {
    padding: 12px 12px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .slides section .quiz-header h2 {
    margin: 0;
}

.reveal .slides section .quiz-body {
    padding: 12px 16px;
    color: #3f3f3f;
}

.reveal .slides section .quiz-body li:not(:last-child) {
    margin-bottom: 15px;
}

.reveal .slides section .quiz-footer {
    padding: 12px 16px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .left-footer {
    display: block;
    position: fixed;
    z-index: 30;
    left: 15px;
    bottom: 15px;
    font-size: 12px;
    color: #eee8d5;
}

ul.before::before {
    content:attr(data-header);
    font-size:120%;
    font-weight:bold;
    margin-left: -2ex;
}
pre.after.small::after {
    content:attr(data-footer);
    font-size: 0.5em;
    font-family: "Roboto Condensed", "sans-serif";
}

table tbody tr td em {
    color: #eee8d5;
    font-weight:bold;
    font-style: italic;
}
    </style>

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'reveal.js/css/print/pdf.css' : 'reveal.js/css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <!--[if lt IE 9]>
    <script src="reveal.js/lib/js/html5shiv.js"></script>
    <![endif]-->

    <!--
      Issue #1105: Keyboard shortcut to skip forward/back over fragments #1173
      https://github.com/hakimel/reveal.js/pull/1173
    -->
  </head>

<!--
;; indent block of text
;; C-u <number> C-x <TAB>



;; select this code and do 'M-x eval-region'
(defun make-fragment (p1 p2)
  "Wraps the selection into 'fragment' <span>s and quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple-index (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\" data-fragment-index=\"1\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple-index-border (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment highlight-current-border\" data-fragment-index=\"1\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun quote-fragment (p1 p2)
  "Quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (delete-region p1 p2)
  (insert inputStr)
)

(global-set-key (kbd "C-f") 'make-fragment)
(global-set-key (kbd "C-S-f") 'make-fragment-simple)
(global-set-key (kbd "C-ö") 'make-fragment-simple-index)
(global-set-key (kbd "C-S-b") 'make-fragment-simple-index-border)
(global-set-key (kbd "C-S-q") 'quote-fragment)
;; revert key-binding
;; (global-set-key (kbd "C-f") 'forward-char)
;;
;; use 'C-h k <keystroke>' to find out what <keystroke> ia currently bound to

;; (vhs) The following is required to make 'C-c C-t' insert <code> tags without
;; newlines. 'sgml-tag-alist' is the "file-local" version of 'html-tag-alist'
(add-to-list 'html-tag-alist '("code"))
(add-to-list 'sgml-tag-alist '("code"))
(add-to-list 'html-tag-alist '("span"))
(add-to-list 'sgml-tag-alist '("span"))


-->

  <body>

    <div class="reveal">

      <div class="left-footer">
        <object data="images/AWS_transparent.png" alt="AWS logo" type="image/png" style="vertical-align: middle; width: 40px; margin: 0 10px 0 0;"/>
        <span>© 2024, Amazon Web Services, Inc. or its affiliates. All rights reserved.</span>
      </div>

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section data-background="images/background_title.jpg" style="text-align: left;">
          <p style="margin-bottom : 6em;"></p>
          <h1>From Java to Native in 80 Cycles</h1>
          <p>
            Volker Simonis (<a href="https://twitter.com/volker_simonis">@volker_simonis</a>)<br/>
            Principal Software Engineer<br/>
            AWS
          </p>
        </section>

        <section data-background="images/background_default.jpg">
          <h2 style="text-transform: none;">
            <a href="https://simonis.github.io/JavaLand2024/" style="color: inherit;">https://simonis.github.io/JavaLand2024/</a>
          </h2>
        </section>

        <section data-background="images/background_default.jpg">
          <h1>About me</h1>

          <ul class="before" data-header="Present:" style="width: 60%;">
            <li>Principal Software Engineer @ Amazon Corretto</li>
            <li>OpenJDK Member, Committer &amp; Reviewer</li>
            <li>OpenJDK Build, Hotspot, Porters &amp; Vulnerability Group</li>
            <li>OpenJDK Governing Board</li>
            <li>Java Community Process Executive Committee</li>
          </ul>

          <ul class="before" data-header="Past:" style="width: 60%;">
            <li>SAP JVM and SapMachine @ SAP</li>
            <li>OpenJDK Build PowerPC/AIX &amp; s390x Project Lead </li>
            <li>JCP Expert Groups for Java SE 9 to 13</li>
          </ul>
        </section>

        <section data-background="images/background_default.jpg" class="demo">
          <h1>Starting with a little anecdote..</h1>

          <br/>
          <div style="width: 100%">
            <div style="float: left; width: 46%">

              <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
                <code class="java" data-trim="true" data-noescape="true" style="height:100%">
  @CompilerControl(DONT_INLINE)
  public void empty() {}

  native void emptyNative();

  @Benchmark
  public void callingEmpty() {
    empty();
  }
  @Benchmark
  public void callingEmptyNative() {
    emptyNative();
  }
                </code>
              </pre>

            </div>
            <div style="position:relative; float: right; width: 54%">


              <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
                <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
<span class="fragment" data-fragment-index="1">$ java -jar benchmarks.jar
Benchmark              Score  Units
callingEmpty           3.705  ns/op
callingEmptyNative    <span class="fragment highlight-current-border" data-fragment-index="5">20.129</span>  ns/op

<span class="fragment" data-fragment-index="3">$ java <span class="fragment highlight-current-border" data-fragment-index="3">-XX:-TieredCompilation</span> -jar ...
Benchmark              Score  Units
callingEmpty           3.707  ns/op
callingEmptyNative    <span class="fragment highlight-current-border" data-fragment-index="5">39.736</span>  ns/op
</span></span>
                </code>
              </pre>
<!--
Laptop (benchmark_start.sh / cset)

Corretto 17
===========
Benchmark                      (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingEmpty               1  avgt    5   3.273 ± 0.005  ns/op
NativeCall.callingEmptyNative         1  avgt    5  19.667 ± 0.381  ns/op

Corretto 17 -XX:-TieredCompilation
===========
Benchmark                      (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingEmpty               1  avgt    5   3.273 ± 0.005  ns/op
NativeCall.callingEmptyNative         1  avgt    5  38.572 ± 0.867  ns/op

Corretto 21
===========
Benchmark                      (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingEmpty               1  avgt    5   3.705 ± 0.004  ns/op
NativeCall.callingEmptyNative         1  avgt    5  20.129 ± 0.126  ns/op

Corretto 21 -XX:-TieredCompilation
===========
Benchmark                      (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingEmpty               1  avgt    5   3.707 ± 0.009  ns/op
NativeCall.callingEmptyNative         1  avgt    5  39.736 ± 0.217  ns/op

Corretto 21 -XX:+UseSystemMemoryBarrier
===========
Benchmark                      (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingEmpty               1  avgt    5   3.708 ± 0.016  ns/op
NativeCall.callingEmptyNative         1  avgt    5  10.204 ± 0.075  ns/op

Corretto 21 -XX:-TieredCompilation -XX:+UseSystemMemoryBarrier
===========
Benchmark                      (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingEmpty               1  avgt    5   3.703 ± 0.003  ns/op
NativeCall.callingEmptyNative         1  avgt    5  36.319 ± 0.167  ns/op
-->
            </div>
          </div>

          <div style="position:relative; float: left; width: 100%">
            <p class="fragment" data-fragment-index="7" style="text-align:left; padding:0 1ex;">
              <a href="https://bugs.openjdk.org/browse/JDK-8329126">
                8329126: No native wrappers generated with -XX:-TieredCompilation after JDK-8251462
              </a>
            </p>
          </div>
        </section>

        <section data-background="images/background_default.jpg" class="demo">
          <h1>Some words on benchmarking..</h1>

          <ul>

            <span class="fragment"><li><a href="https://github.com/openjdk/jmh">Java Micro Harness</a>
                (JMH) is a great tool, but..</li></span>
            <span class="fragment"><li>.. <a href="https://github.com/openjdk/jmh/tree/master/jmh-samples/src/main/java/org/openjdk/jmh/samples">read the documentation</a>!!!</li></span>
            <span class="fragment"><li>Know what you do:</li></span>
            <span class="fragment"><li>Use physical, dedicated hardware</li></span>
            <span class="fragment"><li>Use fixed clock speed</li></span>
            <span class="fragment"><li>Turn Hyperthreading off</li></span>
            <span class="fragment"><li>Pin your workload on specific CPUs
                (<a href="https://manpages.ubuntu.com/manpages/focal/en/man1/cset.1.html">cset</a>)</li></span>
            <span class="fragment"><li>Use a fixed Java heap (<code>-Xms</code> == <code>-Xmx</code>)</li></span>
            <span class="fragment"><li>Preallocate memory (<code>-XX:+AlwaysPreTouch</code>)</li></span>
            <span class="fragment"><li>Beware of GC! (<code>-XX:+UseEpsilonGC</code>)</li></span>
            <span class="fragment"><li>Micro- vs. Macro-Benchmarks (use proper statistics)<br/><br/></li></span>
            <span class="fragment"><li>Always verify and <em>triple</em>-check your results!</li></span>
          </ul>
        </section>

        <section data-background="images/background_default.jpg" class="demo">
          <h1><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">JNI</a>
            - the Java Native Interface</h1>

          <ul>
            <li><a href="https://web.archive.org/web/20120626120230/http://java.sun.com/docs/books/jni/html/intro.html#2186">JDK 1.0</a> had a non-standard "<em>Native Method Interface</em>"</li>
            <li><a href="https://web.archive.org/web/20120728074805/http://java.sun.com/docs/books/jni/">JDK 1.1</a>
              introduced the standard JNI</li>
            <li><a href="https://web.archive.org/web/20120626120230/http://java.sun.com/docs/books/jni/html/intro.html#2186">JDK 1.2</a>
              rewrote internal native methods to JNI<br/><br/></li>

            <li>Contains the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html">JNI Invocation API</a>
              <ul>
                <li>Attach to a running JVM</li>
                <li>Create and control a JVM from native code</li>
              </ul><br/>
            </li>

            <li>The basis for the <a href="https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html">
                JVM Tools Interface (JVMTI)</a></li>
          </ul>
        </section>


        <section data-background="images/background_default.jpg" class="demo">
          <h1>A simple example</h1>

          <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
            <code class="java" data-trim="true" data-noescape="true" style="height:100%">
package io.simonis;

public class NativeCall {

  String msg = "Hello ";
  public static native int simple();
  public native void hello(String s);

  static {
    // Load libNativeCall.so from LD_LIBRARY_PATH / -Djava.library.path
    System.loadLibrary("NativeCall");
  }

  public static void main(String[] args) {
    System.out.println(simple());
    new NativeCall().hello("world");
  }
}
            </code>
          </pre>
        </section>


        <section data-background="images/background_default.jpg" class="demo">
          <h1>The Native Side</h1>

          <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
            <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
<span class="fragment fade-out" data-fragment-index="1">$ javac io/simonis/NativeCall.java
$ javah io.simonis.NativeCall                                // JDK &lt;  11</span>
<span class="fragment" data-fragment-index="1">$ javac -h . io/simonis/NativeCall.java                      // JDK &gt;= 11</span>
<span class="fragment" data-fragment-index="3">$ cat io_simonis_NativeCall.h</span>
            </code>
          </pre>

          <pre class="big noshadow fragment" data-fragment-index="4" style="height:100%; margin: 1ex;" data-trim="true">
            <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
// Class:     io_simonis_NativeCall
// Method:    simple
// Signature: ()I
JNIEXPORT
jint JNICALL <span class="fragment highlight-current-border" data-fragment-index="6">Java</span>_<span class="fragment highlight-current-border" data-fragment-index="8">io_simonis_NativeCall</span>_<span class="fragment highlight-current-border" data-fragment-index="10">simple</span>(<span class="fragment highlight-current-border" data-fragment-index="12">JNIEnv</span>*, <span class="fragment highlight-current-border" data-fragment-index="14">jclass</span>);

// Class:     io_simonis_NativeCall
// Method:    hello
// Signature: (Ljava/lang/String;)V
JNIEXPORT
void JNICALL <span class="fragment highlight-current-border" data-fragment-index="6">Java</span>_<span class="fragment highlight-current-border" data-fragment-index="8">io_simonis_NativeCall</span>_<span class="fragment highlight-current-border" data-fragment-index="10">hello</span>(<span class="fragment highlight-current-border" data-fragment-index="12">JNIEnv</span>*, <span class="fragment highlight-current-border" data-fragment-index="16">jobject</span>, jstring);
            </code>
          </pre>

          <p class="fragment" style="text-align:center; padding:0 1ex;">
            Use
            <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/invocation.html#JNJI_OnLoad">
              <code>JNI_OnLoad()</code></a>/<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#registering_native_methods">
              <code>RegisterNatives()</code></a> if you don't like the name mangling :)
          </p>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
#include &lt;jni.h&gt;
#include "io_simonis_NativeCall.h"

extern "C" JNIEXPORT
jint JNICALL Java_io_simonis_NativeCall_simple(JNIEnv* env, jclass cls) {
  return 42;
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
extern "C" JNIEXPORT
void JNICALL Java_io_simonis_NativeCall_hello(JNIEnv* env, jobject self, jstring s) {
  <span class="fragment">jclass myClass = env->GetObjectClass(self);</span>
  <span class="fragment">jfieldID msgID = env->GetFieldID(myClass, "msg", "Ljava/lang/String;");</span>
  <span class="fragment">jobject msg = env->GetObjectField(self, msgID);</span>
  <span class="fragment">jclass system = env->FindClass("java/lang/System");</span>
  <span class="fragment">jfieldID outID = env->GetStaticFieldID(system, "out", "Ljava/io/PrintStream;");</span>
  <span class="fragment">jobject out = env->GetStaticObjectField(system, outID);</span>
  <span class="fragment">jclass printStream = env->FindClass("java/io/PrintStream");</span>
  <span class="fragment">jmethodID print = env->GetMethodID(printStream, "print", "(Ljava/lang/String;)V");</span>
  <span class="fragment">jmethodID println = env->GetMethodID(printStream, "println", "()V");</span>
  <span class="fragment">env->CallVoidMethod(out, print, msg);</span>
  <span class="fragment">env->CallVoidMethod(out, print, s);</span>
  <span class="fragment">env->CallVoidMethod(out, println);</span>
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ g++ -fPIC -I $JAVA_HOME/include/ -I $JAVA_HOME/include/linux/ \
      -shared -o <span class="fragment highlight-current-border">libNativeCall.so</span> NativeCall.cpp
<span class="fragment">
$ java io.simonis.NativeCall
Exception in thread "main" java.lang.<span class="fragment highlight-current-border">UnsatisfiedLinkError</span>:
  no NativeCall in java.library.path:
  /usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib
	at java.base/java.lang.ClassLoader.loadLibrary(ClassLoader.java:2458)
	at java.base/java.lang.Runtime.loadLibrary0(Runtime.java:916)
	at java.base/java.lang.System.loadLibrary(System.java:2059)
	at io.simonis.NativeCall.&lt;clinit&gt;(NativeCall.java:11)
</span>
<span class="fragment">$ java <mark class="border">-Djava.library.path=./</mark> io.simonis.NativeCall
42
Hello world</span>
              </code>
            </pre>

            <p class="fragment" style="text-align:center; padding:0 1ex;">
              There&apos;s a lot that can go wrong!
              <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/clopts002.html">
                <code>-Xcheck:jni</code> </a> is your friend :)
            </p>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Implementing native methods</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java <mark class="border">-Xcheck:jni</mark> -Djava.library.path=./ io.simonis.NativeCall
<span class="fragment">42
Hello
WARNING in native method: JNI call made without checking \
  exceptions when required to from CallVoidMethodV
	at io.simonis.NativeCall.hello(Native Method)
	at io.simonis.NativeCall.main(NativeCall.java:16)
world
WARNING in native method: JNI call made without checking \
  exceptions when required to from CallVoidMethodV
	at io.simonis.NativeCall.hello(Native Method)
	at io.simonis.NativeCall.main(NativeCall.java:16)</span> 
              </code>
            </pre>
          </section>

        </section>

        <!-- NOTICE: 'style="height: 100%;"' here and in the sub-sections IS CRUCIAL to get scrolling in <code> sections!!! -->
        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section class="center">
            <h1>Demo - Native Call Stack</h1>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ LD_LIBRARY_PATH=./ jdb io.simonis.NativeCall
&gt; stop at java.io.FileOutputStream.write(byte[],int,int)
&gt; run
Breakpoint hit: "thread=main", java.io.FileOutputStream.write(), line=366 bci=0

main[1] where
  [1] java.io.FileOutputStream.write (FileOutputStream.java:366)
  [2] java.io.BufferedOutputStream.flushBuffer (BufferedOutputStream.java:125)
  [3] java.io.BufferedOutputStream.implFlush (BufferedOutputStream.java:252)
  [4] java.io.BufferedOutputStream.flush (BufferedOutputStream.java:240)
  [5] java.io.PrintStream.implWrite (PrintStream.java:649)
  [6] java.io.PrintStream.write (PrintStream.java:627)
  [7] sun.nio.cs.StreamEncoder.writeBytes (StreamEncoder.java:291)
  [8] sun.nio.cs.StreamEncoder.implFlushBuffer (StreamEncoder.java:386)
  [9] sun.nio.cs.StreamEncoder.lockedFlushBuffer (StreamEncoder.java:117)
  [10] sun.nio.cs.StreamEncoder.flushBuffer (StreamEncoder.java:104)
  [11] java.io.OutputStreamWriter.flushBuffer (OutputStreamWriter.java:194)
  [12] java.io.PrintStream.implWriteln (PrintStream.java:853)
  [13] java.io.PrintStream.writeln (PrintStream.java:830)
  [14] java.io.PrintStream.println (PrintStream.java:1,082)
  [15] io.simonis.NativeCall.main (NativeCall.java:15)
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
main[1] cont
42
Breakpoint hit: "thread=main", java.io.FileOutputStream.write(), line=366 bci=0

main[1] where
  [1] java.io.FileOutputStream.write (FileOutputStream.java:366)
  [2] java.io.BufferedOutputStream.flushBuffer (BufferedOutputStream.java:125)
  [3] java.io.BufferedOutputStream.implFlush (BufferedOutputStream.java:252)
  [4] java.io.BufferedOutputStream.flush (BufferedOutputStream.java:240)
  [5] java.io.PrintStream.implWrite (PrintStream.java:649)
  [6] java.io.PrintStream.write (PrintStream.java:627)
  [7] sun.nio.cs.StreamEncoder.writeBytes (StreamEncoder.java:291)
  [8] sun.nio.cs.StreamEncoder.implFlushBuffer (StreamEncoder.java:386)
  [9] sun.nio.cs.StreamEncoder.lockedFlushBuffer (StreamEncoder.java:117)
  [10] sun.nio.cs.StreamEncoder.flushBuffer (StreamEncoder.java:104)
  [11] java.io.OutputStreamWriter.flushBuffer (OutputStreamWriter.java:194)
  [12] java.io.PrintStream.implWrite (PrintStream.java:816)
  [13] java.io.PrintStream.write (PrintStream.java:794)
  [14] java.io.PrintStream.print (PrintStream.java:1,006)
  [15] io.simonis.NativeCall.hello (native method)
  [16] io.simonis.NativeCall.main (NativeCall.java:16)
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ LD_LIBRARY_PATH=./ gdb java
(gdb) run io.simonis.NativeCall
Thread 2 "java" received signal SIGSEGV, Segmentation fault.
(gdb) b writeBytes
Breakpoint 1 at 0x7ffff4fe580c: file ../io_util.c, line 148.
(gdb) cont
Thread 2 "java" hit Breakpoint 1, writeBytes(..) at ../io_util.c:148
(gdb) where
#0  writeBytes (..) at ../io_util.c:148
#1  0x00007ffff4fd9c6b in Java_java_io_FileOutputStream_writeBytes(..) at ..
#2  0x00007fffdfb4610e in ?? ()
#3  0x0000000000000008 in ?? ()
#4  0x00007ffff002c0dc in ?? ()
#5  0x00007ffff7d440af in ?? ()
#6  0x00007fff6a014628 in ?? ()
#7  0x00007fffdfb45afc in ?? ()
#8  0xfffffffffffffff7 in ?? ()
#9  0x00007fff6edcd4c0 in ?? ()
#10 0x0000000000000008 in ?? ()
#11 0x00007fff6e554078 in ?? ()
#12 0x0000000000000000 in ?? ()
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
(gdb) call pns($sp, $rbp, $pc)
"Executing pns"
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjava.so+0x1c80c]  writeBytes+0x5a
C  [libjava.so+0x10c6b]  Java_java_io_FileOutputStream_writeBytes+0x60
j  java.io.FileOutputStream.writeBytes([BIIZ)V+0 java.base@23-internal
j  java.io.FileOutputStream.write([BII)V+25 java.base@23-internal
j  java.io.BufferedOutputStream.flushBuffer()V+20 java.base@23-internal
j  java.io.BufferedOutputStream.implFlush()V+1 java.base@23-internal
j  java.io.BufferedOutputStream.flush()V+15 java.base@23-internal
j  java.io.PrintStream.implWrite([BII)V+25 java.base@23-internal
j  java.io.PrintStream.write([BII)V+18 java.base@23-internal
j  sun.nio.cs.StreamEncoder.writeBytes()V+81 java.base@23-internal
j  sun.nio.cs.StreamEncoder.implFlushBuffer()V+11 java.base@23-internal
j  sun.nio.cs.StreamEncoder.lockedFlushBuffer()V+8 java.base@23-internal
j  sun.nio.cs.StreamEncoder.flushBuffer()V+22 java.base@23-internal
j  java.io.OutputStreamWriter.flushBuffer()V+4 java.base@23-internal
j  java.io.PrintStream.implWriteln(Ljava/lang/String;)V+30 java.base@23-internal
j  java.io.PrintStream.writeln(Ljava/lang/String;)V+16 java.base@23-internal
j  java.io.PrintStream.println(I)V+14 java.base@23-internal
j  io.simonis.NativeCall.main([Ljava/lang/String;)V+6
v  ~StubRoutines::call_stub 0x00007fffdfb37d21
V  [libjvm.so+0xdcbfdd]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x60b
V  [libjvm.so+0x12fec92]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3a
V  [libjvm.so+0xdcb9ce]  JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3e
V  [libjvm.so+0xeb4770]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*)+0x1a7
V  [libjvm.so+0xec2f88]  jni_CallStaticVoidMethod+0x1e6
C  [libjli.so+0x54d2]  invokeStaticMainWithArgs+0xb5
C  [libjli.so+0x64d2]  JavaMain+0xbc1
C  [libjli.so+0xc65f]  ThreadJavaMain+0x2b
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
(gdb) cont
Thread 2 "java" hit Breakpoint 1, writeBytes(..) at ../io_util.c:148
gdb) call pns($sp, $rbp, $pc)
"Executing pns"
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjava.so+0x1c80c]  writeBytes+0x5a
C  [libjava.so+0x10c6b]  Java_java_io_FileOutputStream_writeBytes+0x60
j  java.io.FileOutputStream.writeBytes([BIIZ)V+0 java.base@23-internal
j  java.io.FileOutputStream.write([BII)V+25 java.base@23-internal
j  java.io.BufferedOutputStream.flushBuffer()V+20 java.base@23-internal
j  java.io.BufferedOutputStream.implFlush()V+1 java.base@23-internal
j  java.io.BufferedOutputStream.flush()V+15 java.base@23-internal
j  java.io.PrintStream.implWrite([BII)V+25 java.base@23-internal
j  java.io.PrintStream.write([BII)V+18 java.base@23-internal
j  sun.nio.cs.StreamEncoder.writeBytes()V+81 java.base@23-internal
j  sun.nio.cs.StreamEncoder.implFlushBuffer()V+11 java.base@23-internal
j  sun.nio.cs.StreamEncoder.lockedFlushBuffer()V+8 java.base@23-internal
j  sun.nio.cs.StreamEncoder.flushBuffer()V+22 java.base@23-internal
j  java.io.OutputStreamWriter.flushBuffer()V+4 java.base@23-internal
j  java.io.PrintStream.implWrite(Ljava/lang/String;)V+23 java.base@23-internal
j  java.io.PrintStream.write(Ljava/lang/String;)V+16 java.base@23-internal
j  java.io.PrintStream.print(Ljava/lang/String;)V+5 java.base@23-internal
v  ~StubRoutines::call_stub 0x00007fffdfb37d21
V  [libjvm.so+0xdcbfdd]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x60b
V  [libjvm.so+0x12fec92]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3a
V  [libjvm.so+0xdcb9ce]  JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3e
V  [libjvm.so+0xeb4cba]  jni_invoke_nonstatic(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*)+0x47b
V  [libjvm.so+0xeba460]  jni_CallVoidMethodV+0x177
C  [libNativeCall.so+0x151b]  JNIEnv_::CallVoidMethod(_jobject*, _jmethodID*, ...)+0xcf
C  [libNativeCall.so+0x1368]  Java_io_simonis_NativeCall_hello+0x138
j  io.simonis.NativeCall.hello(Ljava/lang/String;)V+0
j  io.simonis.NativeCall.main([Ljava/lang/String;)V+18
v  ~StubRoutines::call_stub 0x00007fffdfb37d21
V  [libjvm.so+0xdcbfdd]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x60b
V  [libjvm.so+0x12fec92]  os::os_exception_wrapper(void (*)(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*), JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3a
V  [libjvm.so+0xdcb9ce]  JavaCalls::call(JavaValue*, methodHandle const&amp;, JavaCallArguments*, JavaThread*)+0x3e
V  [libjvm.so+0xeb4770]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*)+0x1a7
V  [libjvm.so+0xec2f88]  jni_CallStaticVoidMethod+0x1e6
C  [libjli.so+0x54d2]  invokeStaticMainWithArgs+0xb5
C  [libjli.so+0x64d2]  JavaMain+0xbc1
C  [libjli.so+0xc65f]  ThreadJavaMain+0x2b
              </code>
            </pre>
          </section>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">
            <h1>The JNI Invocation API</h1>

            <pre class="big noshadow" style="height:100%; margin: 1ex;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
#include &lt;stdio.h&gt;
#include "jni.h"

int main(int argc, char** argv) {
  JavaVM *jvm;
  JNIEnv *env;
  JavaVMInitArgs vm_args;
  vm_args.version = JNI_VERSION_1_8;
  vm_args.nOptions = 0;
  int ret =<span class="fragment highlight-current-border" data-fragment-index="1"> JNI_CreateJavaVM(&amp;jvm, (void**)&amp;env, &amp;vm_args)</span>;
  jclass cls = <span class="fragment highlight-current-border" data-fragment-index="2">env-&gt;FindClass("io/simonis/NativeCall")</span>;
  jmethodID simple = <span class="fragment highlight-current-border" data-fragment-index="3">env-&gt;GetStaticMethodID(cls, "simple", "()I")</span>;
  printf("%d\n",<span class="fragment highlight-current-border" data-fragment-index="4"> env-&gt;CallStaticIntMethod(cls, simple)</span>);
  jvm-&gt;DestroyJavaVM();
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>The JNI Invocation API</h1>

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ g++ <span class="fragment highlight-current-border" data-fragment-index="1">-I $JAVA_HOME/include/ -I $JAVA_HOME/include/linux/</span> \
      <span class="fragment highlight-current-border" data-fragment-index="2">-L $JAVA_HOME/lib/server</span> -o java java.cpp <span class="fragment highlight-current-border" data-fragment-index="2">-ljvm</span>
<span class="fragment" data-fragment-index="3">
$ <span class="fragment highlight-current-border" data-fragment-index="5">JAVA_TOOL_OPTIONS=-Xlog:gc*</span> \
  <span class="fragment highlight-current-border" data-fragment-index="4">LD_LIBRARY_PATH=$JAVA_HOME/lib/server</span> ./java
Picked up JAVA_TOOL_OPTIONS: -Xlog:gc*
[0.006s][info][gc] Using G1
[0.010s][info][gc,init] Version: 17.0.9+8-LTS (release)
<span class="fragment highlight-current-border" data-fragment-index="6">42</span></span>
              </code>
            </pre>
          </section>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">

            <h1>What happens at a Native Call?</h1>

            <ul>
              <li class="fragment">Register shuffling for native calling conventions
                <ul>
                  <li>Add <code>JNIEnv</code> (and <code>jclass</code> for static methods) arguments</li>
                </ul>
              </li>
              <li class="fragment">Wrap non-primitive types in <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/design.html#global_and_local_references"><code>JNIHandles</code></a>
                <ul>
                  <li><a href="">Local References</a> / <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#global_references">Global References</a></li>
                </ul>
              </li>
              <li class="fragment">Transition <a href="https://github.com/openjdk/jdk/blob/040c93565c0dff6270911eb9e58d78aa01bbb925/src/hotspot/share/utilities/globalDefinitions.hpp#L984-L1013">thread state</a> from <code>in_Java</code> to <code>in_native</code></li>
              <li class="fragment">Do the actual call</li>
              <li class="fragment">Transition <a href="https://github.com/openjdk/jdk/blob/040c93565c0dff6270911eb9e58d78aa01bbb925/src/hotspot/share/utilities/globalDefinitions.hpp#L984-L1013">thread state</a> from <code>in_native</code> to <code>in_Java</code></li>
              <li class="fragment">Unwrap and clean-up <code>JNIHandles</code></li>
              <li class="fragment">Check for pending exceptions</li>
              <li class="fragment">Check for a <a href="https://simonis.github.io/hotspot_internals/hotspot_internals.xhtml">Safepoint</a></li>
            </ul>
          </section>


          <section data-background="images/background_default.jpg" class="demo">

            <h1>Native Call Details</h1>

            <ul>
              <li><a href="https://github.com/openjdk/jdk/blob/d771ec6296bd3bb17ac2dd79671fdb6f154b4ea5/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp#L793">
                  Interpreter native method stub</a> (default)</li>
              <li><a href="https://github.com/openjdk/jdk/blob/d771ec6296bd3bb17ac2dd79671fdb6f154b4ea5/src/hotspot/cpu/x86/sharedRuntime_x86_64.cpp#L1666-L1688">
                  Compiled native wrapper</a> (for <em>hot</em> methods)</li>
              <li><code>-XX:+/-PreferInterpreterNativeStubs</code></li>
              <li><code>-XX:+PrintCompilation</code> signals this with an "<code>n</code>"<br/>
                and compilation level "<code>0</code>":
              </li>
            </ul><br/>
            <pre class="big noshadow fragment" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java -XX:+PrintCompilation ...
...
 48  6  <span class="fragment highlight-current-border">n 0</span>  NativeCallDemo::sayHello (native)
                  </code>
                </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Calling Conventions</h1>

            <ul>
              <li>The Interpreter <a href="https://github.com/openjdk/jdk/blob/21867c929a2f2c961148f2cd1e79d672ac278d27/src/hotspot/cpu/x86/stubGenerator_x86_64.cpp#L67">passes all arguments on the stack</a>
              </li>
              <li><a href="https://github.com/openjdk/jdk/blob/21867c929a2f2c961148f2cd1e79d672ac278d27/src/hotspot/cpu/x86/assembler_x86.hpp#L97">Comiled Calling Conventions</a> are a shifted version of the Native CC</li>
            </ul>
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
------|---------------------------------------------------
  C   | <span class="fragment highlight-current-border" data-fragment-index="1">c_rarg0</span>   <span class="fragment highlight-current-border" data-fragment-index="2">c_rarg1</span>  c_rarg2 c_rarg3 c_rarg4 c_rarg5
------|---------------------------------------------------
Win32 | rcx       rdx      r8      r9      rdi*    rsi*
Sys V | rdi       rsi      rdx     rcx     r8      r9
------|---------------------------------------------------
Java  | j_rarg5   <span class="fragment highlight-current-border" data-fragment-index="1">j_rarg0</span>  <span class="fragment highlight-current-border" data-fragment-index="2">j_rarg1</span> j_rarg2 j_rarg3 j_rarg4
------|---------------------------------------------------
              </code>
            </pre>
            <ul>
              <li class="fragment">Allows calling native methods without argument shuffling (<code>JNIEnv*</code>)</li>
              <li class="fragment">Static native methods requier an extra slot for the <code>jclass</code> argument</li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <h1>Native Call Demo</h1>

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true" style="height:100%">
package io.simonis;

public class NativeCallDemo {

  public static <span class="fragment highlight-current-border" data-fragment-index="1">native void sayHello(String s)</span>;

  static {
    System.loadLibrary("NativeCallDemo");
  }

  public static void main(String[] args) throws Exception {
    <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="3">for (int i = 0; i &lt; 15_000; i++) {</span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">  sayHello("JavaLand");           </span>
    <span class="fragment highlight-current-border border-no-top" data-fragment-index="3">}                                 </span>
  }
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <h1>Native Call Demo</h1>

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
void <span class="fragment highlight-current-border" data-fragment-index="3">sayHello</span>(JNIEnv* env, jclass cls, jstring s) {
  static int counter = 0;
  if (counter++ % 10000 == 0) {
    <span class="fragment highlight-current-border" data-fragment-index="1">printf("Hello %s\n", env-&gt;GetStringUTFChars(s, 0)</span>);
  }
}
<span class="fragment" data-fragment-index="5">
jint <span class="fragment highlight-current-border" data-fragment-index="5">JNI_OnLoad</span>(JavaVM *vm, void *reserved) {
  <span class="fragment" data-fragment-index="7">JNIEnv* env;</span>
  <span class="fragment" data-fragment-index="7">vm-&gt;GetEnv((void**)&amp;env, JNI_VERSION_1_8);</span>
  <span class="fragment" data-fragment-index="9">jclass cls = env-&gt;FindClass("io/simonis/NativeCallDemo");</span>
  <span class="fragment" data-fragment-index="11">static JNINativeMethod methods[] = {</span>
  <span class="fragment" data-fragment-index="11">  {<span class="fragment highlight-current-border" data-fragment-index="11">"sayHello"</span>, "(Ljava/lang/String;)V", (void*)<span class="fragment highlight-current-border" data-fragment-index="11">&amp;sayHello</span>},</span>
  <span class="fragment" data-fragment-index="11">};</span>
  <span class="fragment" data-fragment-index="13">env-&gt;RegisterNatives(cls, methods, 1);</span>
  <span class="fragment" data-fragment-index="15">printf("sayHello() address = %p\n", <span class="fragment highlight-current-border" data-fragment-index="17">&amp;sayHello</span>);</span>
  <span class="fragment" data-fragment-index="19">return JNI_VERSION_1_8;
}</span></span>
              </code>
            </pre>
          </section>

          <section class="center">
            <h1>Demo - <code>Native Call</code></h1>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

            <pre class="big noshadow" style="height:101%; margin: 0;" data-trim="true">
              <code class="x86asm" data-trim="true" data-noescape="true" style="height:100%">
$ java -Djava.library.path=examples/cpp/ -Xbatch \
       -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions \
       -XX:+PrintInterpreter -XX:+PrintNativeNMethods \
       -cp examples/java/ io.simonis.NativeCallDemo
...
----------------------------------------------------------------------
native method entry point (kind = native)  [0x00007fffdfb46a00, 0x00007fffdfb479c8]  4040 bytes

--------------------------------------------------------------------------------
  0x00007fffdfb46a00:   mov    0x10(%rbx),%rcx              ;;@FILE: /priv/simonisv/OpenJDK/Git/jdk/src/hotspot/cpu/x86/templateInterpreterGenerator_x86.cpp
                                                            ;;  800:   address entry_point = __ pc();
                                                            ;;  809:   __ movptr(rcx, constMethod);
  0x00007fffdfb46a04:   movzwl 0x2e(%rcx),%ecx              ;;  810:   __ load_unsigned_short(rcx, size_of_parameters);
  0x00007fffdfb46a08:   pop    %rax                         ;;  819:   __ pop(rax);                                       // get return address
  0x00007fffdfb46a09:   lea    -0x8(%rsp,%rcx,8),%r14       ;;  824:   __ lea(rlocals, Address(rsp, rcx, Interpreter::stackElementScale(), -wordSize));
  0x00007fffdfb46a0e:   pushq  $0x0                         ;;  828:   __ push(NULL_WORD);
  0x00007fffdfb46a13:   pushq  $0x0                         ;;  831:   __ push(NULL_WORD);
  0x00007fffdfb46a18:   push   %rax                         ;;  631:   __ push(rax);        // save return address
  0x00007fffdfb46a19:   push   %rbp                         ;;  632:   __ enter();          // save old &amp; set new rbp
  0x00007fffdfb46a1a:   mov    %rsp,%rbp
  0x00007fffdfb46a1d:   push   %r13                         ;;  633:   __ push(rbcp);        // set sender sp
  0x00007fffdfb46a1f:   pushq  $0x0                         ;;  634:   __ push(NULL_WORD); // leave last_sp as null
  0x00007fffdfb46a24:   mov    0x10(%rbx),%r13              ;;  635:   __ movptr(rbcp, Address(rbx, Method::const_offset()));      // get ConstMethod*
  0x00007fffdfb46a28:   lea    0x38(%r13),%r13              ;;  636:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset())); // get codebase
  0x00007fffdfb46a2c:   push   %rbx                         ;;  637:   __ push(rbx);        // save Method*
  0x00007fffdfb46a2d:   mov    0x10(%rbx),%rdx              ;;  639:   __ load_mirror(rdx, rbx, rscratch2);
  0x00007fffdfb46a31:   mov    0x8(%rdx),%rdx
  0x00007fffdfb46a35:   mov    0x20(%rdx),%rdx
  0x00007fffdfb46a39:   mov    0x78(%rdx),%rdx
  0x00007fffdfb46a3d:   mov    (%rdx),%rdx
  0x00007fffdfb46a40:   push   %rdx                         ;;  640:   __ push(rdx);
  0x00007fffdfb46a41:   mov    0x18(%rbx),%rdx              ;;  643:     __ movptr(rdx, Address(rbx, in_bytes(Method::method_data_offset())));
  0x00007fffdfb46a45:   test   %rdx,%rdx                    ;;  644:     __ testptr(rdx, rdx);
  0x00007fffdfb46a48:   je     0x00007fffdfb46a55           ;;  645:     __ jcc(Assembler::zero, method_data_continue);
  0x00007fffdfb46a4e:   add    $0x160,%rdx                  ;;  646:     __ addptr(rdx, in_bytes(MethodData::data_offset()));
  0x00007fffdfb46a55:   push   %rdx                         ;;  647:     __ bind(method_data_continue);
                                                            ;;  648:     __ push(rdx);      // set the mdp (method data pointer)
  0x00007fffdfb46a56:   mov    0x10(%rbx),%rdx              ;;  653:   __ movptr(rdx, Address(rbx, Method::const_offset()));
  0x00007fffdfb46a5a:   mov    0x8(%rdx),%rdx               ;;  654:   __ movptr(rdx, Address(rdx, ConstMethod::constants_offset()));
  0x00007fffdfb46a5e:   mov    0x18(%rdx),%rdx              ;;  655:   __ movptr(rdx, Address(rdx, ConstantPool::cache_offset()));
  0x00007fffdfb46a62:   push   %rdx                         ;;  656:   __ push(rdx); // set constant pool cache
  0x00007fffdfb46a63:   mov    %r14,%rax                    ;;  658:   __ movptr(rax, rlocals);
  0x00007fffdfb46a66:   sub    %rbp,%rax                    ;;  659:   __ subptr(rax, rbp);
  0x00007fffdfb46a69:   shr    $0x3,%rax                    ;;  660:   __ shrptr(rax, Interpreter::logStackElementSize);  // rax = rlocals - fp();
  0x00007fffdfb46a6d:   push   %rax                         ;;  661:   __ push(rax); // set relativized rlocals, see frame::interpreter_frame_locals()
  0x00007fffdfb46a6e:   pushq  $0x0                         ;;  664:     __ push(0); // no bcp
  0x00007fffdfb46a73:   pushq  $0xfffffffffffffff7          ;;  669:   __ push(frame::interpreter_frame_initial_sp_offset);
  0x00007fffdfb46a78:   mov    0x30(%rbx),%eax              ;;  838:   __ movl(rax, access_flags);
  0x00007fffdfb46a7b:   test   $0x100,%eax                  ;;  841:     __ testl(rax, JVM_ACC_NATIVE);
  0x00007fffdfb46a80:   jne    0x00007fffdfb46a9a           ;;  842:     __ jcc(Assembler::notZero, L);
  0x00007fffdfb46a86:   movabs $0x7ffff7331698,%rdi         ;;  843:     __ stop("tried to execute non-native method as native");
  0x00007fffdfb46a90:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46a94:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46a99:   hlt    
  0x00007fffdfb46a9a:   test   $0x400,%eax                  ;;  844:     __ bind(L);
                                                            ;;  848:     __ testl(rax, JVM_ACC_ABSTRACT);
  0x00007fffdfb46a9f:   je     0x00007fffdfb46ab9           ;;  849:     __ jcc(Assembler::zero, L);
  0x00007fffdfb46aa5:   movabs $0x7ffff73316c8,%rdi         ;;  850:     __ stop("tried to execute abstract method in interpreter");
  0x00007fffdfb46aaf:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46ab3:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46ab8:   hlt    
  0x00007fffdfb46ab9:   movb   $0x1,0x4c9(%r15)             ;;  851:     __ bind(L);
                                                            ;;  865:   __ movbool(do_not_unlock_if_synchronized, true);
  0x00007fffdfb46ac1:   mov    0x18(%rbx),%rax              ;;  410:     __ movptr(rax, Address(rbx, Method::method_data_offset()));
  0x00007fffdfb46ac5:   test   %rax,%rax                    ;;  411:     __ testptr(rax, rax);
  0x00007fffdfb46ac8:   je     0x00007fffdfb46aea           ;;  412:     __ jccb(Assembler::zero, no_mdo);
  0x00007fffdfb46aca:   mov    0x11c(%rax),%ecx             ;;  417:     __ increment_mask_and_jump(mdo_invocation_counter, mask, rcx, overflow);
  0x00007fffdfb46ad0:   add    $0x2,%ecx
  0x00007fffdfb46ad3:   mov    %ecx,0x11c(%rax)
  0x00007fffdfb46ad9:   and    0x130(%rax),%ecx
  0x00007fffdfb46adf:   je     0x00007fffdfb47898
  0x00007fffdfb46ae5:   jmpq   0x00007fffdfb46c3b           ;;  418:     __ jmp(done);
  0x00007fffdfb46aea:   mov    0x20(%rbx),%rax              ;;  420:   __ bind(no_mdo);
                                                            ;;  425:   __ get_method_counters(rbx, rax, done);
  0x00007fffdfb46aee:   test   %rax,%rax
  0x00007fffdfb46af1:   jne    0x00007fffdfb46c29
  0x00007fffdfb46af7:   callq  0x00007fffdfb46b01
  0x00007fffdfb46afc:   jmpq   0x00007fffdfb46c1c
  0x00007fffdfb46b01:   mov    %rbx,%rsi
  0x00007fffdfb46b04:   lea    0x8(%rsp),%rax
  0x00007fffdfb46b09:   mov    %r13,-0x40(%rbp)
  0x00007fffdfb46b0d:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb46b12:   je     0x00007fffdfb46b2c
  0x00007fffdfb46b18:   movabs $0x7ffff6ecd950,%rdi
  0x00007fffdfb46b22:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46b26:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46b2b:   hlt    
  0x00007fffdfb46b2c:   cmp    0x17fe089d(%rip),%r12        # 0x00007ffff7b273d0
  0x00007fffdfb46b33:   je     0x00007fffdfb46b4d
 ;; call_VM_base: heap base corrupted?
  0x00007fffdfb46b39:   movabs $0x7ffff70a62b8,%rdi
  0x00007fffdfb46b43:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46b47:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46b4c:   hlt    
  0x00007fffdfb46b4d:   mov    %r15,%rdi
  0x00007fffdfb46b50:   vzeroupper 
  0x00007fffdfb46b53:   mov    %rbp,0x3f0(%r15)
  0x00007fffdfb46b5a:   mov    %rax,0x3e0(%r15)
  0x00007fffdfb46b61:   test   $0xf,%spl
  0x00007fffdfb46b65:   je     0x00007fffdfb46b7d
  0x00007fffdfb46b6b:   sub    $0x8,%rsp
  0x00007fffdfb46b6f:   callq  0x00007ffff5fbcb1a = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007fffdfb46b74:   add    $0x8,%rsp
  0x00007fffdfb46b78:   jmpq   0x00007fffdfb46b82
  0x00007fffdfb46b7d:   callq  0x00007ffff5fbcb1a = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007fffdfb46b82:   push   %rax
  0x00007fffdfb46b83:   push   %rdi
  0x00007fffdfb46b84:   push   %rsi
  0x00007fffdfb46b85:   push   %rdx
  0x00007fffdfb46b86:   push   %rcx
  0x00007fffdfb46b87:   push   %r8
  0x00007fffdfb46b89:   push   %r9
  0x00007fffdfb46b8b:   push   %r10
  0x00007fffdfb46b8d:   push   %r11
  0x00007fffdfb46b8f:   test   $0xf,%spl
  0x00007fffdfb46b93:   je     0x00007fffdfb46bab
  0x00007fffdfb46b99:   sub    $0x8,%rsp
  0x00007fffdfb46b9d:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb46ba2:   add    $0x8,%rsp
  0x00007fffdfb46ba6:   jmpq   0x00007fffdfb46bb0
  0x00007fffdfb46bab:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb46bb0:   pop    %r11
  0x00007fffdfb46bb2:   pop    %r10
  0x00007fffdfb46bb4:   pop    %r9
  0x00007fffdfb46bb6:   pop    %r8
  0x00007fffdfb46bb8:   pop    %rcx
  0x00007fffdfb46bb9:   pop    %rdx
  0x00007fffdfb46bba:   pop    %rsi
  0x00007fffdfb46bbb:   pop    %rdi
  0x00007fffdfb46bbc:   cmp    %rax,%r15
  0x00007fffdfb46bbf:   je     0x00007fffdfb46bd9
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x00007fffdfb46bc5:   movabs $0x7ffff70a6430,%rdi
  0x00007fffdfb46bcf:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46bd3:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46bd8:   hlt    
  0x00007fffdfb46bd9:   pop    %rax
  0x00007fffdfb46bda:   movq   $0x0,0x3e0(%r15)
  0x00007fffdfb46be5:   movq   $0x0,0x3f0(%r15)
  0x00007fffdfb46bf0:   movq   $0x0,0x3e8(%r15)
  0x00007fffdfb46bfb:   vzeroupper 
  0x00007fffdfb46bfe:   cmpq   $0x0,0x8(%r15)
  0x00007fffdfb46c03:   je     0x00007fffdfb46c0e
  0x00007fffdfb46c09:   jmpq   0x00007fffdfb38c00
  0x00007fffdfb46c0e:   mov    -0x40(%rbp),%r13
  0x00007fffdfb46c12:   mov    -0x38(%rbp),%r14
  0x00007fffdfb46c16:   lea    0x0(%rbp,%r14,8),%r14
  0x00007fffdfb46c1b:   retq   
  0x00007fffdfb46c1c:   mov    0x20(%rbx),%rax
  0x00007fffdfb46c20:   test   %rax,%rax
  0x00007fffdfb46c23:   je     0x00007fffdfb46c3b
  0x00007fffdfb46c29:   mov    0xc(%rax),%ecx               ;;  427:   __ increment_mask_and_jump(invocation_counter, mask, rcx, overflow);
  0x00007fffdfb46c2c:   add    $0x2,%ecx
  0x00007fffdfb46c2f:   mov    %ecx,0xc(%rax)
  0x00007fffdfb46c32:   and    0x24(%rax),%ecx
  0x00007fffdfb46c35:   je     0x00007fffdfb47898
  0x00007fffdfb46c3b:   cmpq   $0x0,0x530(%r15)             ;;  428:   __ bind(done);
                                                            ;;  874:   __ bind(continue_after_compile);
                                                            ;;  756:   __ cmpptr(Address(thread, JavaThread::shadow_zone_safe_limit()), NULL_WORD);
  0x00007fffdfb46c43:   jne    0x00007fffdfb46c5d           ;;  757:   __ jcc(Assembler::notEqual, L_good_limit);
  0x00007fffdfb46c49:   movabs $0x7ffff7331638,%rdi         ;;  758:   __ stop("shadow zone safe limit is not initialized");
  0x00007fffdfb46c53:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46c57:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46c5c:   hlt    
  0x00007fffdfb46c5d:   cmpq   $0x0,0x538(%r15)             ;;  759:   __ bind(L_good_limit);
                                                            ;;  762:   __ cmpptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), NULL_WORD);
  0x00007fffdfb46c65:   jne    0x00007fffdfb46c7f           ;;  763:   __ jcc(Assembler::notEqual, L_good_watermark);
  0x00007fffdfb46c6b:   movabs $0x7ffff7331668,%rdi         ;;  764:   __ stop("shadow zone growth watermark is not initialized");
  0x00007fffdfb46c75:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46c79:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46c7e:   hlt    
  0x00007fffdfb46c7f:   cmp    0x538(%r15),%rsp             ;;  765:   __ bind(L_good_watermark);
                                                            ;;  770:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_growth_watermark()));
  0x00007fffdfb46c86:   ja     0x00007fffdfb46d44           ;;  771:   __ jcc(Assembler::above, L_done);
  0x00007fffdfb46c8c:   mov    %eax,-0x1000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46c93:   mov    %eax,-0x2000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46c9a:   mov    %eax,-0x3000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46ca1:   mov    %eax,-0x4000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46ca8:   mov    %eax,-0x5000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46caf:   mov    %eax,-0x6000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cb6:   mov    %eax,-0x7000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cbd:   mov    %eax,-0x8000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cc4:   mov    %eax,-0x9000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46ccb:   mov    %eax,-0xa000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cd2:   mov    %eax,-0xb000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cd9:   mov    %eax,-0xc000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46ce0:   mov    %eax,-0xd000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46ce7:   mov    %eax,-0xe000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cee:   mov    %eax,-0xf000(%rsp)           ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cf5:   mov    %eax,-0x10000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46cfc:   mov    %eax,-0x11000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d03:   mov    %eax,-0x12000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d0a:   mov    %eax,-0x13000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d11:   mov    %eax,-0x14000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d18:   mov    %eax,-0x15000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d1f:   mov    %eax,-0x16000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d26:   mov    %eax,-0x17000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d2d:   mov    %eax,-0x18000(%rsp)          ;;  774:     __ bang_stack_with_offset(p*page_size);
  0x00007fffdfb46d34:   cmp    0x530(%r15),%rsp             ;;  779:   __ cmpptr(rsp, Address(thread, JavaThread::shadow_zone_safe_limit()));
  0x00007fffdfb46d3b:   jbe    0x00007fffdfb46d44           ;;  780:   __ jccb(Assembler::belowEqual, L_done);
  0x00007fffdfb46d3d:   mov    %rsp,0x538(%r15)             ;;  781:   __ movptr(Address(thread, JavaThread::shadow_zone_growth_watermark()), rsp);
  0x00007fffdfb46d44:   movb   $0x0,0x4c9(%r15)             ;;  783:   __ bind(L_done);
                                                            ;;  880:   __ movbool(do_not_unlock_if_synchronized, false);
  0x00007fffdfb46d4c:   mov    0x30(%rbx),%eax              ;;  892:       __ movl(rax, access_flags);
  0x00007fffdfb46d4f:   test   $0x20,%al                    ;;  893:       __ testl(rax, JVM_ACC_SYNCHRONIZED);
  0x00007fffdfb46d51:   je     0x00007fffdfb46d6b           ;;  894:       __ jcc(Assembler::zero, L);
  0x00007fffdfb46d57:   movabs $0x7ffff73316f8,%rdi         ;;  895:       __ stop("method needs synchronization");
  0x00007fffdfb46d61:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46d65:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46d6a:   hlt    
  0x00007fffdfb46d6b:   mov    -0x48(%rbp),%rax             ;;  896:       __ bind(L);
                                                            ;;  907:     __ movptr(rax, monitor_block_top);
  0x00007fffdfb46d6f:   lea    0x0(%rbp,%rax,8),%rax        ;;  908:     __ lea(rax, Address(rbp, rax, Address::times_ptr));
  0x00007fffdfb46d74:   cmp    %rsp,%rax                    ;;  909:     __ cmpptr(rax, rsp);
  0x00007fffdfb46d77:   je     0x00007fffdfb46d91           ;;  910:     __ jcc(Assembler::equal, L);
  0x00007fffdfb46d7d:   movabs $0x7ffff7331718,%rdi         ;;  911:     __ stop("broken stack frame setup in interpreter 5");
  0x00007fffdfb46d87:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46d8b:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46d90:   hlt    
  0x00007fffdfb46d91:   cmpb   $0x0,0x180965f9(%rip)        # 0x00007ffff7bdd391
                                                            ;;  912:     __ bind(L);
                                                            ;;  917:   __ notify_method_entry();
  0x00007fffdfb46d98:   je     0x00007fffdfb46de5
  0x00007fffdfb46d9e:   mov    -0x18(%rbp),%rsi
  0x00007fffdfb46da2:   mov    %r15,%rdi
  0x00007fffdfb46da5:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb46daa:   je     0x00007fffdfb46dc4
  0x00007fffdfb46db0:   movabs $0x7ffff6ecd910,%rdi
  0x00007fffdfb46dba:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46dbe:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46dc3:   hlt    
  0x00007fffdfb46dc4:   test   $0xf,%spl
  0x00007fffdfb46dc8:   je     0x00007fffdfb46de0
  0x00007fffdfb46dce:   sub    $0x8,%rsp
  0x00007fffdfb46dd2:   callq  0x00007ffff6607342 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007fffdfb46dd7:   add    $0x8,%rsp
  0x00007fffdfb46ddb:   jmpq   0x00007fffdfb46de5
  0x00007fffdfb46de0:   callq  0x00007ffff6607342 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007fffdfb46de5:   mov    -0x18(%rbp),%rbx             ;;  925:   __ get_method(method);
  0x00007fffdfb46de9:   mov    0x10(%rbx),%r11              ;;  926:   __ movptr(t, Address(method, Method::const_offset()));
  0x00007fffdfb46ded:   movzwl 0x2e(%r11),%r11d             ;;  927:   __ load_unsigned_short(t, Address(t, ConstMethod::size_of_parameters_offset()));
  0x00007fffdfb46df2:   shl    $0x3,%r11d                   ;;  935:   __ shll(t, Interpreter::logStackElementSize);
  0x00007fffdfb46df6:   sub    %r11,%rsp                    ;;  937:   __ subptr(rsp, t);
  0x00007fffdfb46df9:   sub    $0x0,%rsp                    ;;  938:   __ subptr(rsp, frame::arg_reg_save_area_bytes); // windows
  0x00007fffdfb46dfd:   and    $0xfffffffffffffff0,%rsp     ;;  939:   __ andptr(rsp, -16); // must be 16 byte boundary (see amd64 ABI)
  0x00007fffdfb46e01:   mov    0x78(%rbx),%r11              ;;  945:     __ movptr(t, Address(method, Method::signature_handler_offset()));
  0x00007fffdfb46e05:   test   %r11,%r11                    ;;  946:     __ testptr(t, t);
  0x00007fffdfb46e08:   jne    0x00007fffdfb46f3b           ;;  947:     __ jcc(Assembler::notZero, L);
  0x00007fffdfb46e0e:   callq  0x00007fffdfb46e18           ;;  948:     __ call_VM(noreg,
  0x00007fffdfb46e13:   jmpq   0x00007fffdfb46f33
  0x00007fffdfb46e18:   mov    %rbx,%rsi
  0x00007fffdfb46e1b:   lea    0x8(%rsp),%rax
  0x00007fffdfb46e20:   mov    %r13,-0x40(%rbp)
  0x00007fffdfb46e24:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb46e29:   je     0x00007fffdfb46e43
  0x00007fffdfb46e2f:   movabs $0x7ffff6ecd950,%rdi
  0x00007fffdfb46e39:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46e3d:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46e42:   hlt    
  0x00007fffdfb46e43:   cmp    0x17fe0586(%rip),%r12        # 0x00007ffff7b273d0
  0x00007fffdfb46e4a:   je     0x00007fffdfb46e64
 ;; call_VM_base: heap base corrupted?
  0x00007fffdfb46e50:   movabs $0x7ffff70a62b8,%rdi
  0x00007fffdfb46e5a:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46e5e:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46e63:   hlt    
  0x00007fffdfb46e64:   mov    %r15,%rdi
  0x00007fffdfb46e67:   vzeroupper 
  0x00007fffdfb46e6a:   mov    %rbp,0x3f0(%r15)
  0x00007fffdfb46e71:   mov    %rax,0x3e0(%r15)
  0x00007fffdfb46e78:   test   $0xf,%spl
  0x00007fffdfb46e7c:   je     0x00007fffdfb46e94
  0x00007fffdfb46e82:   sub    $0x8,%rsp
  0x00007fffdfb46e86:   callq  0x00007ffff5fbe27a = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007fffdfb46e8b:   add    $0x8,%rsp
  0x00007fffdfb46e8f:   jmpq   0x00007fffdfb46e99
  0x00007fffdfb46e94:   callq  0x00007ffff5fbe27a = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007fffdfb46e99:   push   %rax
  0x00007fffdfb46e9a:   push   %rdi
  0x00007fffdfb46e9b:   push   %rsi
  0x00007fffdfb46e9c:   push   %rdx
  0x00007fffdfb46e9d:   push   %rcx
  0x00007fffdfb46e9e:   push   %r8
  0x00007fffdfb46ea0:   push   %r9
  0x00007fffdfb46ea2:   push   %r10
  0x00007fffdfb46ea4:   push   %r11
  0x00007fffdfb46ea6:   test   $0xf,%spl
  0x00007fffdfb46eaa:   je     0x00007fffdfb46ec2
  0x00007fffdfb46eb0:   sub    $0x8,%rsp
  0x00007fffdfb46eb4:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb46eb9:   add    $0x8,%rsp
  0x00007fffdfb46ebd:   jmpq   0x00007fffdfb46ec7
  0x00007fffdfb46ec2:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb46ec7:   pop    %r11
  0x00007fffdfb46ec9:   pop    %r10
  0x00007fffdfb46ecb:   pop    %r9
  0x00007fffdfb46ecd:   pop    %r8
  0x00007fffdfb46ecf:   pop    %rcx
  0x00007fffdfb46ed0:   pop    %rdx
  0x00007fffdfb46ed1:   pop    %rsi
  0x00007fffdfb46ed2:   pop    %rdi
  0x00007fffdfb46ed3:   cmp    %rax,%r15
  0x00007fffdfb46ed6:   je     0x00007fffdfb46ef0
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x00007fffdfb46edc:   movabs $0x7ffff70a6430,%rdi
  0x00007fffdfb46ee6:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46eea:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46eef:   hlt    
  0x00007fffdfb46ef0:   pop    %rax
  0x00007fffdfb46ef1:   movq   $0x0,0x3e0(%r15)
  0x00007fffdfb46efc:   movq   $0x0,0x3f0(%r15)
  0x00007fffdfb46f07:   movq   $0x0,0x3e8(%r15)
  0x00007fffdfb46f12:   vzeroupper 
  0x00007fffdfb46f15:   cmpq   $0x0,0x8(%r15)
  0x00007fffdfb46f1a:   je     0x00007fffdfb46f25
  0x00007fffdfb46f20:   jmpq   0x00007fffdfb38c00
  0x00007fffdfb46f25:   mov    -0x40(%rbp),%r13
  0x00007fffdfb46f29:   mov    -0x38(%rbp),%r14
  0x00007fffdfb46f2d:   lea    0x0(%rbp,%r14,8),%r14
  0x00007fffdfb46f32:   retq   
  0x00007fffdfb46f33:   mov    -0x18(%rbp),%rbx             ;;  952:     __ get_method(method);
  0x00007fffdfb46f37:   mov    0x78(%rbx),%r11              ;;  953:     __ movptr(t, Address(method, Method::signature_handler_offset()));
  0x00007fffdfb46f3b:   callq  *%r11                        ;;  954:     __ bind(L);
                                                            ;;  969:   __ call(t);
  0x00007fffdfb46f3e:   mov    -0x18(%rbp),%rbx             ;;  970:   __ get_method(method);        // slow path can do a GC, reload RBX
  0x00007fffdfb46f42:   mov    %rax,0x18(%rbp)              ;;  975:   __ movptr(Address(rbp,
  0x00007fffdfb46f46:   mov    0x30(%rbx),%r11d             ;;  982:     __ movl(t, Address(method, Method::access_flags_offset()));
  0x00007fffdfb46f4a:   test   $0x8,%r11b                   ;;  983:     __ testl(t, JVM_ACC_STATIC);
  0x00007fffdfb46f4e:   je     0x00007fffdfb46f6f           ;;  984:     __ jcc(Assembler::zero, L);
  0x00007fffdfb46f54:   mov    0x10(%rbx),%r11              ;;  986:     __ load_mirror(t, method, rax);
  0x00007fffdfb46f58:   mov    0x8(%r11),%r11
  0x00007fffdfb46f5c:   mov    0x20(%r11),%r11
  0x00007fffdfb46f60:   mov    0x78(%r11),%r11
  0x00007fffdfb46f64:   mov    (%r11),%r11
  0x00007fffdfb46f67:   mov    %r11,0x10(%rbp)              ;;  988:     __ movptr(Address(rbp, frame::interpreter_frame_oop_temp_offset * wordSize),
  0x00007fffdfb46f6b:   lea    0x10(%rbp),%rsi              ;;  995:     __ lea(c_rarg1,
  0x00007fffdfb46f6f:   mov    0x70(%rbx),%rax              ;;  998:     __ bind(L);
                                                            ;; 1004:     __ movptr(rax, Address(method, Method::native_function_offset()));
  0x00007fffdfb46f73:   movabs $0x7ffff6606cfd,%r10         ;; 1006:     __ cmpptr(rax, unsatisfied.addr(), rscratch1);
  0x00007fffdfb46f7d:   cmp    %r10,%rax
  0x00007fffdfb46f80:   jne    0x00007fffdfb470b3           ;; 1007:     __ jcc(Assembler::notEqual, L);
  0x00007fffdfb46f86:   callq  0x00007fffdfb46f90           ;; 1008:     __ call_VM(noreg,
  0x00007fffdfb46f8b:   jmpq   0x00007fffdfb470ab
  0x00007fffdfb46f90:   mov    %rbx,%rsi
  0x00007fffdfb46f93:   lea    0x8(%rsp),%rax
  0x00007fffdfb46f98:   mov    %r13,-0x40(%rbp)
  0x00007fffdfb46f9c:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb46fa1:   je     0x00007fffdfb46fbb
  0x00007fffdfb46fa7:   movabs $0x7ffff6ecd950,%rdi
  0x00007fffdfb46fb1:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46fb5:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46fba:   hlt    
  0x00007fffdfb46fbb:   cmp    0x17fe040e(%rip),%r12        # 0x00007ffff7b273d0
  0x00007fffdfb46fc2:   je     0x00007fffdfb46fdc
 ;; call_VM_base: heap base corrupted?
  0x00007fffdfb46fc8:   movabs $0x7ffff70a62b8,%rdi
  0x00007fffdfb46fd2:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb46fd6:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb46fdb:   hlt    
  0x00007fffdfb46fdc:   mov    %r15,%rdi
  0x00007fffdfb46fdf:   vzeroupper 
  0x00007fffdfb46fe2:   mov    %rbp,0x3f0(%r15)
  0x00007fffdfb46fe9:   mov    %rax,0x3e0(%r15)
  0x00007fffdfb46ff0:   test   $0xf,%spl
  0x00007fffdfb46ff4:   je     0x00007fffdfb4700c
  0x00007fffdfb46ffa:   sub    $0x8,%rsp
  0x00007fffdfb46ffe:   callq  0x00007ffff5fbe27a = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007fffdfb47003:   add    $0x8,%rsp
  0x00007fffdfb47007:   jmpq   0x00007fffdfb47011
  0x00007fffdfb4700c:   callq  0x00007ffff5fbe27a = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007fffdfb47011:   push   %rax
  0x00007fffdfb47012:   push   %rdi
  0x00007fffdfb47013:   push   %rsi
  0x00007fffdfb47014:   push   %rdx
  0x00007fffdfb47015:   push   %rcx
  0x00007fffdfb47016:   push   %r8
  0x00007fffdfb47018:   push   %r9
  0x00007fffdfb4701a:   push   %r10
  0x00007fffdfb4701c:   push   %r11
  0x00007fffdfb4701e:   test   $0xf,%spl
  0x00007fffdfb47022:   je     0x00007fffdfb4703a
  0x00007fffdfb47028:   sub    $0x8,%rsp
  0x00007fffdfb4702c:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb47031:   add    $0x8,%rsp
  0x00007fffdfb47035:   jmpq   0x00007fffdfb4703f
  0x00007fffdfb4703a:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb4703f:   pop    %r11
  0x00007fffdfb47041:   pop    %r10
  0x00007fffdfb47043:   pop    %r9
  0x00007fffdfb47045:   pop    %r8
  0x00007fffdfb47047:   pop    %rcx
  0x00007fffdfb47048:   pop    %rdx
  0x00007fffdfb47049:   pop    %rsi
  0x00007fffdfb4704a:   pop    %rdi
  0x00007fffdfb4704b:   cmp    %rax,%r15
  0x00007fffdfb4704e:   je     0x00007fffdfb47068
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x00007fffdfb47054:   movabs $0x7ffff70a6430,%rdi
  0x00007fffdfb4705e:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb47062:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb47067:   hlt    
  0x00007fffdfb47068:   pop    %rax
  0x00007fffdfb47069:   movq   $0x0,0x3e0(%r15)
  0x00007fffdfb47074:   movq   $0x0,0x3f0(%r15)
  0x00007fffdfb4707f:   movq   $0x0,0x3e8(%r15)
  0x00007fffdfb4708a:   vzeroupper 
  0x00007fffdfb4708d:   cmpq   $0x0,0x8(%r15)
  0x00007fffdfb47092:   je     0x00007fffdfb4709d
  0x00007fffdfb47098:   jmpq   0x00007fffdfb38c00
  0x00007fffdfb4709d:   mov    -0x40(%rbp),%r13
  0x00007fffdfb470a1:   mov    -0x38(%rbp),%r14
  0x00007fffdfb470a5:   lea    0x0(%rbp,%r14,8),%r14
  0x00007fffdfb470aa:   retq   
  0x00007fffdfb470ab:   mov    -0x18(%rbp),%rbx             ;; 1012:     __ get_method(method);
  0x00007fffdfb470af:   mov    0x70(%rbx),%rax              ;; 1013:     __ movptr(rax, Address(method, Method::native_function_offset()));
  0x00007fffdfb470b3:   lea    0x400(%r15),%rdi             ;; 1014:     __ bind(L);
                                                            ;; 1028:    __ lea(c_rarg0, Address(r15_thread, JavaThread::jni_environment_offset()));
  0x00007fffdfb470ba:   vzeroupper                          ;; 1032:    __ set_last_Java_frame(rsp, rbp, (address) __ pc(), rscratch1);
  0x00007fffdfb470bd:   mov    %rbp,0x3f0(%r15)
  0x00007fffdfb470c4:   movabs $0x7fffdfb470ba,%r10
  0x00007fffdfb470ce:   mov    %r10,0x3e8(%r15)
  0x00007fffdfb470d5:   mov    %rsp,0x3e0(%r15)
  0x00007fffdfb470dc:   mov    0x48c(%r15),%r11d            ;; 1039:     __ movl(t, Address(thread, JavaThread::thread_state_offset()));
  0x00007fffdfb470e3:   cmp    $0x8,%r11d                   ;; 1040:     __ cmpl(t, _thread_in_Java);
  0x00007fffdfb470e7:   je     0x00007fffdfb47101           ;; 1041:     __ jcc(Assembler::equal, L);
  0x00007fffdfb470ed:   movabs $0x7ffff7331850,%rdi         ;; 1042:     __ stop("Wrong thread state in native stub");
  0x00007fffdfb470f7:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb470fb:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb47100:   hlt    
  0x00007fffdfb47101:   movl   $0x4,0x48c(%r15)             ;; 1043:     __ bind(L);
                                                            ;; 1049:   __ movl(Address(thread, JavaThread::thread_state_offset()),
  0x00007fffdfb4710c:   callq  *%rax                        ;; 1053:   __ call(rax);
  0x00007fffdfb4710e:   vzeroupper                          ;; 1058:   __ restore_cpu_control_state_after_jni(rscratch1);
  0x00007fffdfb47111:   sub    $0x10,%rsp                   ;; 1091:   __ push(dtos);
  0x00007fffdfb47115:   vmovsd %xmm0,(%rsp)
  0x00007fffdfb4711a:   sub    $0x10,%rsp                   ;; 1094:   __ push(ltos);
  0x00007fffdfb4711e:   mov    %rax,(%rsp)
  0x00007fffdfb47122:   movq   $0x0,0x8(%rsp)
  0x00007fffdfb4712b:   movl   $0x5,0x48c(%r15)             ;; 1098:   __ movl(Address(thread, JavaThread::thread_state_offset()),
  0x00007fffdfb47136:   lock addl $0x0,-0x40(%rsp)          ;; 1103:     __ membar(Assembler::Membar_mask_bits(
  0x00007fffdfb4713c:   cmp    0x490(%r15),%rbp             ;; 1119:     __ safepoint_poll(slow_path, thread, true /* at_return */, false /* in_nmethod */);
  0x00007fffdfb47143:   ja     0x00007fffdfb47157
  0x00007fffdfb47149:   cmpl   $0x0,0x488(%r15)             ;; 1121:     __ cmpl(Address(thread, JavaThread::suspend_flags_offset()), 0);
  0x00007fffdfb47151:   je     0x00007fffdfb47170           ;; 1122:     __ jcc(Assembler::equal, Continue);
  0x00007fffdfb47157:   mov    %r15,%rdi                    ;; 1123:     __ bind(slow_path);
                                                            ;; 1139:     __ mov(c_rarg0, r15_thread);
  0x00007fffdfb4715a:   mov    %rsp,%r12                    ;; 1140:     __ mov(r12, rsp); // remember sp (can only use r12 if not using call_VM)
  0x00007fffdfb4715d:   sub    $0x0,%rsp                    ;; 1141:     __ subptr(rsp, frame::arg_reg_save_area_bytes); // windows
  0x00007fffdfb47161:   and    $0xfffffffffffffff0,%rsp     ;; 1142:     __ andptr(rsp, -16); // align stack as required by ABI
  0x00007fffdfb47165:   callq  0x00007ffff5fe8684 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
                                                            ;; 1143:     __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans)));
  0x00007fffdfb4716a:   mov    %r12,%rsp                    ;; 1144:     __ mov(rsp, r12); // restore sp
  0x00007fffdfb4716d:   xor    %r12,%r12                    ;; 1145:     __ reinit_heapbase();
  0x00007fffdfb47170:   movl   $0x8,0x48c(%r15)             ;; 1147:     __ bind(Continue);
                                                            ;; 1151:   __ movl(Address(thread, JavaThread::thread_state_offset()), _thread_in_Java);
  0x00007fffdfb4717b:   movq   $0x0,0x3e0(%r15)             ;; 1154:   __ reset_last_Java_frame(thread, true);
  0x00007fffdfb47186:   movq   $0x0,0x3f0(%r15)
  0x00007fffdfb47191:   movq   $0x0,0x3e8(%r15)
  0x00007fffdfb4719c:   vzeroupper 
  0x00007fffdfb4719f:   mov    0x470(%r15),%r11             ;; 1162:   __ movptr(t, Address(thread, JavaThread::active_handles_offset()));
  0x00007fffdfb471a6:   movl   $0x0,0x100(%r11)             ;; 1163:   __ movl(Address(t, JNIHandleBlock::top_offset()), NULL_WORD);
  0x00007fffdfb471b1:   movabs $0x7fffdfb42d7a,%r11         ;; 1170:     __ lea(t, ExternalAddress(AbstractInterpreter::result_handler(T_OBJECT)));
  0x00007fffdfb471bb:   cmp    0x18(%rbp),%r11              ;; 1171:     __ cmpptr(t, Address(rbp, frame::interpreter_frame_result_handler_offset*wordSize));
  0x00007fffdfb471bf:   jne    0x00007fffdfb473d3           ;; 1172:     __ jcc(Assembler::notEqual, no_oop);
  0x00007fffdfb471c5:   mov    (%rsp),%rax                  ;; 1174:     __ pop(ltos);
  0x00007fffdfb471c9:   add    $0x10,%rsp
  0x00007fffdfb471cd:   test   %rax,%rax                    ;; 1176:     __ resolve_jobject(rax /* value */,
  0x00007fffdfb471d0:   je     0x00007fffdfb473be
  0x00007fffdfb471d6:   test   $0x3,%al
  0x00007fffdfb471d8:   jne    0x00007fffdfb471e6
  0x00007fffdfb471de:   mov    (%rax),%rax
  0x00007fffdfb471e1:   jmpq   0x00007fffdfb473be
  0x00007fffdfb471e6:   test   $0x1,%al
  0x00007fffdfb471e8:   jne    0x00007fffdfb471f7
  0x00007fffdfb471ee:   mov    -0x2(%rax),%rax
  0x00007fffdfb471f2:   jmpq   0x00007fffdfb473be
  0x00007fffdfb471f7:   mov    -0x1(%rax),%rax
  0x00007fffdfb471fb:   cmpb   $0x0,0x38(%r15)
  0x00007fffdfb47200:   je     0x00007fffdfb473be
  0x00007fffdfb47206:   cmp    $0x0,%rax
  0x00007fffdfb4720a:   je     0x00007fffdfb473be
  0x00007fffdfb47210:   mov    0x28(%r15),%r11
  0x00007fffdfb47214:   cmp    $0x0,%r11
  0x00007fffdfb47218:   je     0x00007fffdfb47232
  0x00007fffdfb4721e:   sub    $0x8,%r11
  0x00007fffdfb47222:   mov    %r11,0x28(%r15)
  0x00007fffdfb47226:   add    0x30(%r15),%r11
  0x00007fffdfb4722a:   mov    %rax,(%r11)
  0x00007fffdfb4722d:   jmpq   0x00007fffdfb473be
 ;; push_call_clobbered_registers start
  0x00007fffdfb47232:   sub    $0xd0,%rsp
  0x00007fffdfb47239:   mov    %rax,(%rsp)
  0x00007fffdfb4723d:   mov    %rcx,0x8(%rsp)
  0x00007fffdfb47242:   mov    %rdx,0x10(%rsp)
  0x00007fffdfb47247:   mov    %rsi,0x18(%rsp)
  0x00007fffdfb4724c:   mov    %rdi,0x20(%rsp)
  0x00007fffdfb47251:   mov    %r8,0x28(%rsp)
  0x00007fffdfb47256:   mov    %r9,0x30(%rsp)
  0x00007fffdfb4725b:   mov    %r10,0x38(%rsp)
  0x00007fffdfb47260:   mov    %r11,0x40(%rsp)
  0x00007fffdfb47265:   vmovsd %xmm0,0x50(%rsp)
  0x00007fffdfb4726b:   vmovsd %xmm1,0x58(%rsp)
  0x00007fffdfb47271:   vmovsd %xmm2,0x60(%rsp)
  0x00007fffdfb47277:   vmovsd %xmm3,0x68(%rsp)
  0x00007fffdfb4727d:   vmovsd %xmm4,0x70(%rsp)
  0x00007fffdfb47283:   vmovsd %xmm5,0x78(%rsp)
  0x00007fffdfb47289:   vmovsd %xmm6,0x80(%rsp)
  0x00007fffdfb47292:   vmovsd %xmm7,0x88(%rsp)
  0x00007fffdfb4729b:   vmovsd %xmm8,0x90(%rsp)
  0x00007fffdfb472a4:   vmovsd %xmm9,0x98(%rsp)
  0x00007fffdfb472ad:   vmovsd %xmm10,0xa0(%rsp)
  0x00007fffdfb472b6:   vmovsd %xmm11,0xa8(%rsp)
  0x00007fffdfb472bf:   vmovsd %xmm12,0xb0(%rsp)
  0x00007fffdfb472c8:   vmovsd %xmm13,0xb8(%rsp)
  0x00007fffdfb472d1:   vmovsd %xmm14,0xc0(%rsp)
  0x00007fffdfb472da:   vmovsd %xmm15,0xc8(%rsp)
 ;; push_call_clobbered_registers end
  0x00007fffdfb472e3:   mov    %r15,%rsi
  0x00007fffdfb472e6:   mov    %rax,%rdi
  0x00007fffdfb472e9:   test   $0xf,%spl
  0x00007fffdfb472ed:   je     0x00007fffdfb47305
  0x00007fffdfb472f3:   sub    $0x8,%rsp
  0x00007fffdfb472f7:   callq  0x00007ffff5dfe18e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007fffdfb472fc:   add    $0x8,%rsp
  0x00007fffdfb47300:   jmpq   0x00007fffdfb4730a
  0x00007fffdfb47305:   callq  0x00007ffff5dfe18e = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
 ;; pop_call_clobbered_registers start
  0x00007fffdfb4730a:   vmovsd 0xc8(%rsp),%xmm15
  0x00007fffdfb47313:   vmovsd 0xc0(%rsp),%xmm14
  0x00007fffdfb4731c:   vmovsd 0xb8(%rsp),%xmm13
  0x00007fffdfb47325:   vmovsd 0xb0(%rsp),%xmm12
  0x00007fffdfb4732e:   vmovsd 0xa8(%rsp),%xmm11
  0x00007fffdfb47337:   vmovsd 0xa0(%rsp),%xmm10
  0x00007fffdfb47340:   vmovsd 0x98(%rsp),%xmm9
  0x00007fffdfb47349:   vmovsd 0x90(%rsp),%xmm8
  0x00007fffdfb47352:   vmovsd 0x88(%rsp),%xmm7
  0x00007fffdfb4735b:   vmovsd 0x80(%rsp),%xmm6
  0x00007fffdfb47364:   vmovsd 0x78(%rsp),%xmm5
  0x00007fffdfb4736a:   vmovsd 0x70(%rsp),%xmm4
  0x00007fffdfb47370:   vmovsd 0x68(%rsp),%xmm3
  0x00007fffdfb47376:   vmovsd 0x60(%rsp),%xmm2
  0x00007fffdfb4737c:   vmovsd 0x58(%rsp),%xmm1
  0x00007fffdfb47382:   vmovsd 0x50(%rsp),%xmm0
  0x00007fffdfb47388:   mov    0x40(%rsp),%r11
  0x00007fffdfb4738d:   mov    0x38(%rsp),%r10
  0x00007fffdfb47392:   mov    0x30(%rsp),%r9
  0x00007fffdfb47397:   mov    0x28(%rsp),%r8
  0x00007fffdfb4739c:   mov    0x20(%rsp),%rdi
  0x00007fffdfb473a1:   mov    0x18(%rsp),%rsi
  0x00007fffdfb473a6:   mov    0x10(%rsp),%rdx
  0x00007fffdfb473ab:   mov    0x8(%rsp),%rcx
  0x00007fffdfb473b0:   mov    (%rsp),%rax
  0x00007fffdfb473b4:   add    $0xd0,%rsp
  0x00007fffdfb473bb:   vzeroupper 
 ;; pop_call_clobbered_registers end
  0x00007fffdfb473be:   mov    %rax,0x10(%rbp)              ;; 1179:     __ movptr(Address(rbp, frame::interpreter_frame_oop_temp_offset*wordSize), rax);
  0x00007fffdfb473c2:   sub    $0x10,%rsp                   ;; 1181:     __ push(ltos);
  0x00007fffdfb473c6:   mov    %rax,(%rsp)
  0x00007fffdfb473ca:   movq   $0x0,0x8(%rsp)
  0x00007fffdfb473d3:   cmpl   $0x2,0x518(%r15)             ;; 1182:     __ bind(no_oop);
                                                            ;; 1188:     __ cmpl(Address(thread, JavaThread::stack_guard_state_offset()),
  0x00007fffdfb473db:   jne    0x00007fffdfb47499           ;; 1190:     __ jcc(Assembler::notEqual, no_reguard);
  0x00007fffdfb473e1:   sub    $0x80,%rsp                   ;; 1192:     __ pusha(); // XXX only save smashed registers
  0x00007fffdfb473e8:   mov    %rax,0x78(%rsp)
  0x00007fffdfb473ed:   mov    %rcx,0x70(%rsp)
  0x00007fffdfb473f2:   mov    %rdx,0x68(%rsp)
  0x00007fffdfb473f7:   mov    %rbx,0x60(%rsp)
  0x00007fffdfb473fc:   mov    %rbp,0x50(%rsp)
  0x00007fffdfb47401:   mov    %rsi,0x48(%rsp)
  0x00007fffdfb47406:   mov    %rdi,0x40(%rsp)
  0x00007fffdfb4740b:   mov    %r8,0x38(%rsp)
  0x00007fffdfb47410:   mov    %r9,0x30(%rsp)
  0x00007fffdfb47415:   mov    %r10,0x28(%rsp)
  0x00007fffdfb4741a:   mov    %r11,0x20(%rsp)
  0x00007fffdfb4741f:   mov    %r12,0x18(%rsp)
  0x00007fffdfb47424:   mov    %r13,0x10(%rsp)
  0x00007fffdfb47429:   mov    %r14,0x8(%rsp)
  0x00007fffdfb4742e:   mov    %r15,(%rsp)
  0x00007fffdfb47432:   mov    %rsp,%r12                    ;; 1197:     __ mov(r12, rsp); // remember sp (can only use r12 if not using call_VM)
  0x00007fffdfb47435:   sub    $0x0,%rsp                    ;; 1198:     __ subptr(rsp, frame::arg_reg_save_area_bytes); // windows
  0x00007fffdfb47439:   and    $0xfffffffffffffff0,%rsp     ;; 1199:     __ andptr(rsp, -16); // align stack as required by ABI
  0x00007fffdfb4743d:   callq  0x00007ffff660b910 = SharedRuntime::reguard_yellow_pages()
                                                            ;; 1200:     __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages)));
  0x00007fffdfb47442:   mov    %r12,%rsp                    ;; 1201:     __ mov(rsp, r12); // restore sp
  0x00007fffdfb47445:   mov    (%rsp),%r15                  ;; 1202:     __ popa(); // XXX only restore smashed registers
  0x00007fffdfb47449:   mov    0x8(%rsp),%r14
  0x00007fffdfb4744e:   mov    0x10(%rsp),%r13
  0x00007fffdfb47453:   mov    0x18(%rsp),%r12
  0x00007fffdfb47458:   mov    0x20(%rsp),%r11
  0x00007fffdfb4745d:   mov    0x28(%rsp),%r10
  0x00007fffdfb47462:   mov    0x30(%rsp),%r9
  0x00007fffdfb47467:   mov    0x38(%rsp),%r8
  0x00007fffdfb4746c:   mov    0x40(%rsp),%rdi
  0x00007fffdfb47471:   mov    0x48(%rsp),%rsi
  0x00007fffdfb47476:   mov    0x50(%rsp),%rbp
  0x00007fffdfb4747b:   mov    0x60(%rsp),%rbx
  0x00007fffdfb47480:   mov    0x68(%rsp),%rdx
  0x00007fffdfb47485:   mov    0x70(%rsp),%rcx
  0x00007fffdfb4748a:   mov    0x78(%rsp),%rax
  0x00007fffdfb4748f:   add    $0x80,%rsp
  0x00007fffdfb47496:   xor    %r12,%r12                    ;; 1203:     __ reinit_heapbase();
  0x00007fffdfb47499:   mov    -0x18(%rbp),%rbx             ;; 1206:     __ bind(no_reguard);
                                                            ;; 1213:   __ get_method(method);
  0x00007fffdfb4749d:   mov    0x10(%rbx),%r13              ;; 1216:   __ movptr(rbcp, Address(method, Method::const_offset()));   // get ConstMethod*
  0x00007fffdfb474a1:   lea    0x38(%r13),%r13              ;; 1217:   __ lea(rbcp, Address(rbcp, ConstMethod::codes_offset()));    // get codebase
  0x00007fffdfb474a5:   cmpq   $0x0,0x8(%r15)               ;; 1222:     __ cmpptr(Address(thread, Thread::pending_exception_offset()), NULL_WORD);
  0x00007fffdfb474aa:   je     0x00007fffdfb475e6           ;; 1223:     __ jcc(Assembler::zero, L);
  0x00007fffdfb474b0:   callq  0x00007fffdfb474ba           ;; 1228:     __ MacroAssembler::call_VM(noreg,
  0x00007fffdfb474b5:   jmpq   0x00007fffdfb475d2
  0x00007fffdfb474ba:   lea    0x8(%rsp),%rax
  0x00007fffdfb474bf:   mov    %r13,-0x40(%rbp)
  0x00007fffdfb474c3:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb474c8:   je     0x00007fffdfb474e2
  0x00007fffdfb474ce:   movabs $0x7ffff6ecd950,%rdi
  0x00007fffdfb474d8:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb474dc:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb474e1:   hlt    
  0x00007fffdfb474e2:   cmp    0x17fdfee7(%rip),%r12        # 0x00007ffff7b273d0
  0x00007fffdfb474e9:   je     0x00007fffdfb47503
 ;; call_VM_base: heap base corrupted?
  0x00007fffdfb474ef:   movabs $0x7ffff70a62b8,%rdi
  0x00007fffdfb474f9:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb474fd:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb47502:   hlt    
  0x00007fffdfb47503:   mov    %r15,%rdi
  0x00007fffdfb47506:   vzeroupper 
  0x00007fffdfb47509:   mov    %rbp,0x3f0(%r15)
  0x00007fffdfb47510:   mov    %rax,0x3e0(%r15)
  0x00007fffdfb47517:   test   $0xf,%spl
  0x00007fffdfb4751b:   je     0x00007fffdfb47533
  0x00007fffdfb47521:   sub    $0x8,%rsp
  0x00007fffdfb47525:   callq  0x00007ffff5fb9540 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007fffdfb4752a:   add    $0x8,%rsp
  0x00007fffdfb4752e:   jmpq   0x00007fffdfb47538
  0x00007fffdfb47533:   callq  0x00007ffff5fb9540 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007fffdfb47538:   push   %rax
  0x00007fffdfb47539:   push   %rdi
  0x00007fffdfb4753a:   push   %rsi
  0x00007fffdfb4753b:   push   %rdx
  0x00007fffdfb4753c:   push   %rcx
  0x00007fffdfb4753d:   push   %r8
  0x00007fffdfb4753f:   push   %r9
  0x00007fffdfb47541:   push   %r10
  0x00007fffdfb47543:   push   %r11
  0x00007fffdfb47545:   test   $0xf,%spl
  0x00007fffdfb47549:   je     0x00007fffdfb47561
  0x00007fffdfb4754f:   sub    $0x8,%rsp
  0x00007fffdfb47553:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb47558:   add    $0x8,%rsp
  0x00007fffdfb4755c:   jmpq   0x00007fffdfb47566
  0x00007fffdfb47561:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb47566:   pop    %r11
  0x00007fffdfb47568:   pop    %r10
  0x00007fffdfb4756a:   pop    %r9
  0x00007fffdfb4756c:   pop    %r8
  0x00007fffdfb4756e:   pop    %rcx
  0x00007fffdfb4756f:   pop    %rdx
  0x00007fffdfb47570:   pop    %rsi
  0x00007fffdfb47571:   pop    %rdi
  0x00007fffdfb47572:   cmp    %rax,%r15
  0x00007fffdfb47575:   je     0x00007fffdfb4758f
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x00007fffdfb4757b:   movabs $0x7ffff70a6430,%rdi
  0x00007fffdfb47585:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb47589:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb4758e:   hlt    
  0x00007fffdfb4758f:   pop    %rax
  0x00007fffdfb47590:   movq   $0x0,0x3e0(%r15)
  0x00007fffdfb4759b:   movq   $0x0,0x3f0(%r15)
  0x00007fffdfb475a6:   movq   $0x0,0x3e8(%r15)
  0x00007fffdfb475b1:   vzeroupper 
  0x00007fffdfb475b4:   cmpq   $0x0,0x8(%r15)
  0x00007fffdfb475b9:   je     0x00007fffdfb475c4
  0x00007fffdfb475bf:   jmpq   0x00007fffdfb38c00
  0x00007fffdfb475c4:   mov    -0x40(%rbp),%r13
  0x00007fffdfb475c8:   mov    -0x38(%rbp),%r14
  0x00007fffdfb475cc:   lea    0x0(%rbp,%r14,8),%r14
  0x00007fffdfb475d1:   retq   
  0x00007fffdfb475d2:   movabs $0x7ffff6b1cb99,%rdi         ;; 1231:     __ should_not_reach_here();
  0x00007fffdfb475dc:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb475e0:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb475e5:   hlt    
  0x00007fffdfb475e6:   mov    0x30(%rbx),%r11d             ;; 1232:     __ bind(L);
                                                            ;; 1238:     __ movl(t, Address(method, Method::access_flags_offset()));
  0x00007fffdfb475ea:   test   $0x20,%r11b                  ;; 1239:     __ testl(t, JVM_ACC_SYNCHRONIZED);
  0x00007fffdfb475ee:   je     0x00007fffdfb47821           ;; 1240:     __ jcc(Assembler::zero, L);
  0x00007fffdfb475f4:   lea    -0x58(%rbp),%rsi             ;; 1255:       __ lea(regmon, monitor); // address of first monitor
  0x00007fffdfb475f8:   mov    0x8(%rsi),%r11               ;; 1257:       __ movptr(t, Address(regmon, BasicObjectLock::obj_offset()));
  0x00007fffdfb475fc:   test   %r11,%r11                    ;; 1258:       __ testptr(t, t);
  0x00007fffdfb475ff:   jne    0x00007fffdfb4773b           ;; 1259:       __ jcc(Assembler::notZero, unlock);
  0x00007fffdfb47605:   callq  0x00007fffdfb4760f           ;; 1262:       __ MacroAssembler::call_VM(noreg,
  0x00007fffdfb4760a:   jmpq   0x00007fffdfb47727
  0x00007fffdfb4760f:   lea    0x8(%rsp),%rax
  0x00007fffdfb47614:   mov    %r13,-0x40(%rbp)
  0x00007fffdfb47618:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb4761d:   je     0x00007fffdfb47637
  0x00007fffdfb47623:   movabs $0x7ffff6ecd950,%rdi
  0x00007fffdfb4762d:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb47631:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb47636:   hlt    
  0x00007fffdfb47637:   cmp    0x17fdfd92(%rip),%r12        # 0x00007ffff7b273d0
  0x00007fffdfb4763e:   je     0x00007fffdfb47658
 ;; call_VM_base: heap base corrupted?
  0x00007fffdfb47644:   movabs $0x7ffff70a62b8,%rdi
  0x00007fffdfb4764e:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb47652:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb47657:   hlt    
  0x00007fffdfb47658:   mov    %r15,%rdi
  0x00007fffdfb4765b:   vzeroupper 
  0x00007fffdfb4765e:   mov    %rbp,0x3f0(%r15)
  0x00007fffdfb47665:   mov    %rax,0x3e0(%r15)
  0x00007fffdfb4766c:   test   $0xf,%spl
  0x00007fffdfb47670:   je     0x00007fffdfb47688
  0x00007fffdfb47676:   sub    $0x8,%rsp
  0x00007fffdfb4767a:   callq  0x00007ffff5fba9e8 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007fffdfb4767f:   add    $0x8,%rsp
  0x00007fffdfb47683:   jmpq   0x00007fffdfb4768d
  0x00007fffdfb47688:   callq  0x00007ffff5fba9e8 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007fffdfb4768d:   push   %rax
  0x00007fffdfb4768e:   push   %rdi
  0x00007fffdfb4768f:   push   %rsi
  0x00007fffdfb47690:   push   %rdx
  0x00007fffdfb47691:   push   %rcx
  0x00007fffdfb47692:   push   %r8
  0x00007fffdfb47694:   push   %r9
  0x00007fffdfb47696:   push   %r10
  0x00007fffdfb47698:   push   %r11
  0x00007fffdfb4769a:   test   $0xf,%spl
  0x00007fffdfb4769e:   je     0x00007fffdfb476b6
  0x00007fffdfb476a4:   sub    $0x8,%rsp
  0x00007fffdfb476a8:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb476ad:   add    $0x8,%rsp
  0x00007fffdfb476b1:   jmpq   0x00007fffdfb476bb
  0x00007fffdfb476b6:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb476bb:   pop    %r11
  0x00007fffdfb476bd:   pop    %r10
  0x00007fffdfb476bf:   pop    %r9
  0x00007fffdfb476c1:   pop    %r8
  0x00007fffdfb476c3:   pop    %rcx
  0x00007fffdfb476c4:   pop    %rdx
  0x00007fffdfb476c5:   pop    %rsi
  0x00007fffdfb476c6:   pop    %rdi
  0x00007fffdfb476c7:   cmp    %rax,%r15
  0x00007fffdfb476ca:   je     0x00007fffdfb476e4
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x00007fffdfb476d0:   movabs $0x7ffff70a6430,%rdi
  0x00007fffdfb476da:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb476de:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb476e3:   hlt    
  0x00007fffdfb476e4:   pop    %rax
  0x00007fffdfb476e5:   movq   $0x0,0x3e0(%r15)
  0x00007fffdfb476f0:   movq   $0x0,0x3f0(%r15)
  0x00007fffdfb476fb:   movq   $0x0,0x3e8(%r15)
  0x00007fffdfb47706:   vzeroupper 
  0x00007fffdfb47709:   cmpq   $0x0,0x8(%r15)
  0x00007fffdfb4770e:   je     0x00007fffdfb47719
  0x00007fffdfb47714:   jmpq   0x00007fffdfb38c00
  0x00007fffdfb47719:   mov    -0x40(%rbp),%r13
  0x00007fffdfb4771d:   mov    -0x38(%rbp),%r14
  0x00007fffdfb47721:   lea    0x0(%rbp,%r14,8),%r14
  0x00007fffdfb47726:   retq   
  0x00007fffdfb47727:   movabs $0x7ffff6b1cb99,%rdi         ;; 1265:       __ should_not_reach_here();
  0x00007fffdfb47731:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb47735:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb4773a:   hlt    
  0x00007fffdfb4773b:   mov    %r13,-0x40(%rbp)             ;; 1267:       __ bind(unlock);
                                                            ;; 1268:       __ unlock_object(regmon);
  0x00007fffdfb4773f:   mov    0x8(%rsi),%rcx
  0x00007fffdfb47743:   movq   $0x0,0x8(%rsi)
  0x00007fffdfb4774b:   mov    0x728(%r15),%edx
  0x00007fffdfb47752:   cmp    -0x8(%r15,%rdx,1),%rcx
  0x00007fffdfb47757:   jne    0x00007fffdfb477d6
  0x00007fffdfb4775d:   movq   $0x0,-0x8(%r15,%rdx,1)
  0x00007fffdfb47766:   subl   $0x8,0x728(%r15)
  0x00007fffdfb4776e:   cmp    -0x10(%r15,%rdx,1),%rcx
  0x00007fffdfb47773:   je     0x00007fffdfb477ca
  0x00007fffdfb47779:   mov    (%rcx),%rax
  0x00007fffdfb4777c:   test   $0x2,%al
  0x00007fffdfb4777e:   jne    0x00007fffdfb477b2
  0x00007fffdfb47784:   test   $0x1,%al
  0x00007fffdfb47786:   je     0x00007fffdfb477a0
  0x00007fffdfb4778c:   movabs $0x7ffff70a81c8,%rdi
  0x00007fffdfb47796:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb4779a:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb4779f:   hlt    
  0x00007fffdfb477a0:   mov    %rax,%rdx
  0x00007fffdfb477a3:   or     $0x1,%rdx
  0x00007fffdfb477a7:   lock cmpxchg %rdx,(%rcx)
  0x00007fffdfb477ac:   je     0x00007fffdfb477ca
  0x00007fffdfb477b2:   mov    0x728(%r15),%edx
  0x00007fffdfb477b9:   mov    %rcx,(%r15,%rdx,1)
  0x00007fffdfb477bd:   addl   $0x8,0x728(%r15)
  0x00007fffdfb477c5:   jmpq   0x00007fffdfb477d6
  0x00007fffdfb477ca:   decq   0x5a0(%r15)
  0x00007fffdfb477d1:   jmpq   0x00007fffdfb4781d
  0x00007fffdfb477d6:   mov    %rcx,0x8(%rsi)
  0x00007fffdfb477da:   mov    %rsi,%rdi
  0x00007fffdfb477dd:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb477e2:   je     0x00007fffdfb477fc
  0x00007fffdfb477e8:   movabs $0x7ffff6ecd910,%rdi
  0x00007fffdfb477f2:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb477f6:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb477fb:   hlt    
  0x00007fffdfb477fc:   test   $0xf,%spl
  0x00007fffdfb47800:   je     0x00007fffdfb47818
  0x00007fffdfb47806:   sub    $0x8,%rsp
  0x00007fffdfb4780a:   callq  0x00007ffff5fba874 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0x00007fffdfb4780f:   add    $0x8,%rsp
  0x00007fffdfb47813:   jmpq   0x00007fffdfb4781d
  0x00007fffdfb47818:   callq  0x00007ffff5fba874 = InterpreterRuntime::monitorexit(BasicObjectLock*)
  0x00007fffdfb4781d:   mov    -0x40(%rbp),%r13
  0x00007fffdfb47821:   cmpb   $0x0,0x18095b69(%rip)        # 0x00007ffff7bdd391
                                                            ;; 1270:     __ bind(L);
                                                            ;; 1278:   __ notify_method_exit(vtos, InterpreterMacroAssembler::NotifyJVMTI);
  0x00007fffdfb47828:   je     0x00007fffdfb47875
  0x00007fffdfb4782e:   mov    -0x18(%rbp),%rsi
  0x00007fffdfb47832:   mov    %r15,%rdi
  0x00007fffdfb47835:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb4783a:   je     0x00007fffdfb47854
  0x00007fffdfb47840:   movabs $0x7ffff6ecd910,%rdi
  0x00007fffdfb4784a:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb4784e:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb47853:   hlt    
  0x00007fffdfb47854:   test   $0xf,%spl
  0x00007fffdfb47858:   je     0x00007fffdfb47870
  0x00007fffdfb4785e:   sub    $0x8,%rsp
  0x00007fffdfb47862:   callq  0x00007ffff66074f8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007fffdfb47867:   add    $0x8,%rsp
  0x00007fffdfb4786b:   jmpq   0x00007fffdfb47875
  0x00007fffdfb47870:   callq  0x00007ffff66074f8 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007fffdfb47875:   mov    (%rsp),%rax                  ;; 1283:   __ pop(ltos);
  0x00007fffdfb47879:   add    $0x10,%rsp
  0x00007fffdfb4787d:   vmovsd (%rsp),%xmm0                 ;; 1284:   LP64_ONLY( __ pop(dtos));
  0x00007fffdfb47882:   add    $0x10,%rsp
  0x00007fffdfb47886:   mov    0x18(%rbp),%r11              ;; 1286:   __ movptr(t, Address(rbp,
  0x00007fffdfb4788a:   callq  *%r11                        ;; 1288:   __ call(t);
  0x00007fffdfb4788d:   mov    -0x8(%rbp),%r11              ;; 1291:   __ movptr(t, Address(rbp,
  0x00007fffdfb47891:   leaveq                              ;; 1294:   __ leave();                                // remove frame anchor
  0x00007fffdfb47892:   pop    %rdi                         ;; 1295:   __ pop(rdi);                               // get return address
  0x00007fffdfb47893:   mov    %r11,%rsp                    ;; 1296:   __ mov(rsp, t);                            // set sp to sender sp
  0x00007fffdfb47896:   jmpq   *%rdi                        ;; 1297:   __ jmp(rdi);
  0x00007fffdfb47898:   mov    $0x0,%esi                    ;; 1301:     __ bind(invocation_counter_overflow);
                                                            ;;  452:   __ movl(rarg, 0);
  0x00007fffdfb4789d:   callq  0x00007fffdfb478a7           ;;  453:   __ call_VM(noreg,
  0x00007fffdfb478a2:   jmpq   0x00007fffdfb479bf
  0x00007fffdfb478a7:   lea    0x8(%rsp),%rax
  0x00007fffdfb478ac:   mov    %r13,-0x40(%rbp)
  0x00007fffdfb478b0:   cmpq   $0x0,-0x10(%rbp)
  0x00007fffdfb478b5:   je     0x00007fffdfb478cf
  0x00007fffdfb478bb:   movabs $0x7ffff6ecd950,%rdi
  0x00007fffdfb478c5:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb478c9:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb478ce:   hlt    
  0x00007fffdfb478cf:   cmp    0x17fdfafa(%rip),%r12        # 0x00007ffff7b273d0
  0x00007fffdfb478d6:   je     0x00007fffdfb478f0
 ;; call_VM_base: heap base corrupted?
  0x00007fffdfb478dc:   movabs $0x7ffff70a62b8,%rdi
  0x00007fffdfb478e6:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb478ea:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb478ef:   hlt    
  0x00007fffdfb478f0:   mov    %r15,%rdi
  0x00007fffdfb478f3:   vzeroupper 
  0x00007fffdfb478f6:   mov    %rbp,0x3f0(%r15)
  0x00007fffdfb478fd:   mov    %rax,0x3e0(%r15)
  0x00007fffdfb47904:   test   $0xf,%spl
  0x00007fffdfb47908:   je     0x00007fffdfb47920
  0x00007fffdfb4790e:   sub    $0x8,%rsp
  0x00007fffdfb47912:   callq  0x00007ffff5fbbf5e = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007fffdfb47917:   add    $0x8,%rsp
  0x00007fffdfb4791b:   jmpq   0x00007fffdfb47925
  0x00007fffdfb47920:   callq  0x00007ffff5fbbf5e = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007fffdfb47925:   push   %rax
  0x00007fffdfb47926:   push   %rdi
  0x00007fffdfb47927:   push   %rsi
  0x00007fffdfb47928:   push   %rdx
  0x00007fffdfb47929:   push   %rcx
  0x00007fffdfb4792a:   push   %r8
  0x00007fffdfb4792c:   push   %r9
  0x00007fffdfb4792e:   push   %r10
  0x00007fffdfb47930:   push   %r11
  0x00007fffdfb47932:   test   $0xf,%spl
  0x00007fffdfb47936:   je     0x00007fffdfb4794e
  0x00007fffdfb4793c:   sub    $0x8,%rsp
  0x00007fffdfb47940:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb47945:   add    $0x8,%rsp
  0x00007fffdfb47949:   jmpq   0x00007fffdfb47953
  0x00007fffdfb4794e:   callq  0x00007ffff55e8d58 = Thread::current()
  0x00007fffdfb47953:   pop    %r11
  0x00007fffdfb47955:   pop    %r10
  0x00007fffdfb47957:   pop    %r9
  0x00007fffdfb47959:   pop    %r8
  0x00007fffdfb4795b:   pop    %rcx
  0x00007fffdfb4795c:   pop    %rdx
  0x00007fffdfb4795d:   pop    %rsi
  0x00007fffdfb4795e:   pop    %rdi
  0x00007fffdfb4795f:   cmp    %rax,%r15
  0x00007fffdfb47962:   je     0x00007fffdfb4797c
 ;; MacroAssembler::call_VM_base: rdi not callee saved?
  0x00007fffdfb47968:   movabs $0x7ffff70a6430,%rdi
  0x00007fffdfb47972:   and    $0xfffffffffffffff0,%rsp
  0x00007fffdfb47976:   callq  0x00007ffff638f360 = MacroAssembler::debug64(char*, long, long*)
  0x00007fffdfb4797b:   hlt    
  0x00007fffdfb4797c:   pop    %rax
  0x00007fffdfb4797d:   movq   $0x0,0x3e0(%r15)
  0x00007fffdfb47988:   movq   $0x0,0x3f0(%r15)
  0x00007fffdfb47993:   movq   $0x0,0x3e8(%r15)
  0x00007fffdfb4799e:   vzeroupper 
  0x00007fffdfb479a1:   cmpq   $0x0,0x8(%r15)
  0x00007fffdfb479a6:   je     0x00007fffdfb479b1
  0x00007fffdfb479ac:   jmpq   0x00007fffdfb38c00
  0x00007fffdfb479b1:   mov    -0x40(%rbp),%r13
  0x00007fffdfb479b5:   mov    -0x38(%rbp),%r14
  0x00007fffdfb479b9:   lea    0x0(%rbp,%r14,8),%r14
  0x00007fffdfb479be:   retq   
  0x00007fffdfb479bf:   mov    -0x18(%rbp),%rbx             ;;  458:   __ movptr(rbx, Address(rbp, method_offset));   // restore Method*
  0x00007fffdfb479c3:   jmpq   0x00007fffdfb46c3b           ;;  461:   __ jmp(do_continue, relocInfo::none);
--------------------------------------------------------------------------------
...

sayHello() address = 0x7ffff50971b9
Hello JavaLand

Compiled method (n/a) 17101    8     n 0       io.simonis.NativeCallDemo::sayHello (native)
 total in heap  [0x00007fffe00c7d90,0x00007fffe00c8128] = 920
 relocation     [0x00007fffe00c7f00,0x00007fffe00c7f40] = 64
 main code      [0x00007fffe00c7f40,0x00007fffe00c811f] = 479
 stub code      [0x00007fffe00c811f,0x00007fffe00c8120] = 1
 oops           [0x00007fffe00c8120,0x00007fffe00c8128] = 8

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Entry Point]
  # {method} {0x00007fff6c4002b8} 'sayHello' '(Ljava/lang/String;)V' in 'io/simonis/NativeCallDemo'
  # parm0:    rsi:rsi   = 'java/lang/String'
  #           [sp+0x50]  (sp of caller)
  0x00007fffe00c7f40:   nop
  0x00007fffe00c7f41:   nop
  0x00007fffe00c7f42:   mov    0x8(%rsi),%r10d
  0x00007fffe00c7f46:   cmp    0x8(%rax),%r10d
  0x00007fffe00c7f4a:   jne    0x00007fffdfc4f0a0           ;   {runtime_call ic_miss_stub}
[Verified Entry Point]
  0x00007fffe00c7f50:   mov    %eax,-0x18000(%rsp)
  0x00007fffe00c7f57:   push   %rbp
  0x00007fffe00c7f58:   mov    %rsp,%rbp
  0x00007fffe00c7f5b:   sub    $0x40,%rsp
  0x00007fffe00c7f5f:   nop
  0x00007fffe00c7f60:   cmpl   $0x0,0x20(%r15)
  0x00007fffe00c7f68:   je     0x00007fffe00c7f6f
  0x00007fffe00c7f6a:   callq  Stub::nmethod_entry_barrier  ;   {runtime_call StubRoutines (final stubs)}
  0x00007fffe00c7f6f:   test   $0xf,%spl
  0x00007fffe00c7f73:   je     0x00007fffe00c7f8d
 ;; improperly aligned stack
  0x00007fffe00c7f79:   movabs $0x7ffff723b41a,%rdi         ;   {external_word}
  0x00007fffe00c7f83:   and    $0xfffffffffffffff0,%rsp
  0x00007fffe00c7f87:   callq  0x00007ffff638f360           ;   {runtime_call MacroAssembler::debug64(char*, long, long*)}
  0x00007fffe00c7f8c:   hlt    
 ;; move 0 -&gt; 2
  0x00007fffe00c7f8d:   mov    %rsi,(%rsp)
  0x00007fffe00c7f91:   cmp    $0x0,%rsi
  0x00007fffe00c7f95:   lea    (%rsp),%rdx
  0x00007fffe00c7f99:   cmove  (%rsp),%rdx
  0x00007fffe00c7f9e:   movabs $0x62c011810,%r14            ;   {oop(a 'java/lang/Class'{0x000000062c011810} = 'io/simonis/NativeCallDemo')}
  0x00007fffe00c7fa8:   mov    %r14,0x30(%rsp)
  0x00007fffe00c7fad:   lea    0x30(%rsp),%r14
  0x00007fffe00c7fb2:   mov    %r14,%rsi
  0x00007fffe00c7fb5:   vzeroupper 
  0x00007fffe00c7fb8:   movabs $0x7fffe00c7fb5,%r10         ;   {internal_word}
  0x00007fffe00c7fc2:   mov    %r10,0x3e8(%r15)
  0x00007fffe00c7fc9:   mov    %rsp,0x3e0(%r15)
  0x00007fffe00c7fd0:   cmpb   $0x0,0x17b153ba(%rip)        # 0x00007ffff7bdd391
                                                            ;   {external_word}
  0x00007fffe00c7fd7:   je     0x00007fffe00c800f
  0x00007fffe00c7fdd:   push   %rsi
  0x00007fffe00c7fde:   push   %rdx
  0x00007fffe00c7fdf:   movabs $0x7fff6c4002b8,%rsi         ;   {metadata({method} {0x00007fff6c4002b8} 'sayHello' '(Ljava/lang/String;)V' in 'io/simonis/NativeCallDemo')}
  0x00007fffe00c7fe9:   mov    %r15,%rdi
  0x00007fffe00c7fec:   test   $0xf,%spl
  0x00007fffe00c7ff0:   je     0x00007fffe00c8008
  0x00007fffe00c7ff6:   sub    $0x8,%rsp
  0x00007fffe00c7ffa:   callq  0x00007ffff6607342           ;   {runtime_call SharedRuntime::dtrace_method_entry(JavaThread*, Method*)}
  0x00007fffe00c7fff:   add    $0x8,%rsp
  0x00007fffe00c8003:   jmpq   0x00007fffe00c800d
  0x00007fffe00c8008:   callq  0x00007ffff6607342           ;   {runtime_call SharedRuntime::dtrace_method_entry(JavaThread*, Method*)}
  0x00007fffe00c800d:   pop    %rdx
  0x00007fffe00c800e:   pop    %rsi
  0x00007fffe00c800f:   lea    0x400(%r15),%rdi
  0x00007fffe00c8016:   movl   $0x4,0x48c(%r15)
  0x00007fffe00c8021:   callq  0x00007ffff50971b9           ;   {runtime_call sayHello(JNIEnv_*, _jclass*, _jstring*)}
  0x00007fffe00c8026:   vzeroupper 
  0x00007fffe00c8029:   movl   $0x5,0x48c(%r15)
  0x00007fffe00c8034:   lock addl $0x0,-0x40(%rsp)
  0x00007fffe00c803a:   cmp    0x490(%r15),%rbp
  0x00007fffe00c8041:   ja     0x00007fffe00c8055
  0x00007fffe00c8047:   cmpl   $0x0,0x488(%r15)
  0x00007fffe00c804f:   je     0x00007fffe00c8071
  0x00007fffe00c8055:   vzeroupper 
  0x00007fffe00c8058:   mov    %r15,%rdi
  0x00007fffe00c805b:   mov    %rsp,%r12
  0x00007fffe00c805e:   sub    $0x0,%rsp
  0x00007fffe00c8062:   and    $0xfffffffffffffff0,%rsp
  0x00007fffe00c8066:   callq  0x00007ffff5fe8684           ;   {runtime_call JavaThread::check_special_condition_for_native_trans(JavaThread*)}
  0x00007fffe00c806b:   mov    %r12,%rsp
  0x00007fffe00c806e:   xor    %r12,%r12
  0x00007fffe00c8071:   movl   $0x8,0x48c(%r15)
  0x00007fffe00c807c:   cmpl   $0x2,0x518(%r15)
  0x00007fffe00c8084:   je     0x00007fffe00c8101
  0x00007fffe00c808a:   cmpb   $0x0,0x17b15300(%rip)        # 0x00007ffff7bdd391
                                                            ;   {external_word}
  0x00007fffe00c8091:   je     0x00007fffe00c80c5
  0x00007fffe00c8097:   movabs $0x7fff6c4002b8,%rsi         ;   {metadata({method} {0x00007fff6c4002b8} 'sayHello' '(Ljava/lang/String;)V' in 'io/simonis/NativeCallDemo')}
  0x00007fffe00c80a1:   mov    %r15,%rdi
  0x00007fffe00c80a4:   test   $0xf,%spl
  0x00007fffe00c80a8:   je     0x00007fffe00c80c0
  0x00007fffe00c80ae:   sub    $0x8,%rsp
  0x00007fffe00c80b2:   callq  0x00007ffff66074f8           ;   {runtime_call SharedRuntime::dtrace_method_exit(JavaThread*, Method*)}
  0x00007fffe00c80b7:   add    $0x8,%rsp
  0x00007fffe00c80bb:   jmpq   0x00007fffe00c80c5
  0x00007fffe00c80c0:   callq  0x00007ffff66074f8           ;   {runtime_call SharedRuntime::dtrace_method_exit(JavaThread*, Method*)}
  0x00007fffe00c80c5:   movq   $0x0,0x3e0(%r15)
  0x00007fffe00c80d0:   movq   $0x0,0x3e8(%r15)
  0x00007fffe00c80db:   vzeroupper 
  0x00007fffe00c80de:   mov    0x470(%r15),%rcx
  0x00007fffe00c80e5:   movl   $0x0,0x100(%rcx)
  0x00007fffe00c80ef:   leaveq 
  0x00007fffe00c80f0:   cmpq   $0x0,0x8(%r15)
  0x00007fffe00c80f5:   jne    0x00007fffe00c80fc
  0x00007fffe00c80fb:   retq   
  0x00007fffe00c80fc:   jmpq   Stub::forward exception      ;   {runtime_call StubRoutines (initial stubs)}
  0x00007fffe00c8101:   vzeroupper 
  0x00007fffe00c8104:   mov    %rsp,%r12
  0x00007fffe00c8107:   sub    $0x0,%rsp
  0x00007fffe00c810b:   and    $0xfffffffffffffff0,%rsp
  0x00007fffe00c810f:   callq  0x00007ffff660b910           ;   {runtime_call SharedRuntime::reguard_yellow_pages()}
  0x00007fffe00c8114:   mov    %r12,%rsp
  0x00007fffe00c8117:   xor    %r12,%r12
  0x00007fffe00c811a:   jmpq   0x00007fffe00c808a
[Stub Code]
  0x00007fffe00c811f:   hlt    
--------------------------------------------------------------------------------
[/Disassembly]
...

17187    8     n 0       io.simonis.NativeCallDemo::sayHello (native)   (static)

Hello JavaLand
              </code>
            </pre>

          </section>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">
            <h1>Accessing the Java heap from Native</h1>

            <ul>
              <li>Java objects anly accessible through references (GC-safe)</li>
              <li>Too slow for primitive array data:
                <ol class="fragment">
                  <li>Copy array data -> safe but slow</li>
                  <li>Block GC (<a href="https://shipilev.net/jvm/anatomy-quarks/9-jni-critical-gclocker/"><code>GCLocker</code></a>)
                    -> fast but dangerous</li>
                  <li>Pin object/region -> fast and safe
                    <ul class="fragment">
                      <li>Only Shenandoah</li>
                      <li>..and G1 since JDK 22 (<a href="https://bugs.openjdk.org/browse/JDK-8276094">JEP 423: Region Pinning for G1</a>)</li>
                    </ul>
                  </li>
                </ol>
              </li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true" style="height:100%">
public class NativeCallGC {

  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="1">public static native void block(int sec);                     </span>
  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="1">public static native void elements(byte[] b, int sec);        </span>
  <span class="fragment highlight-current-border border-no-top" data-fragment-index="1">public static native void elementsCritical(byte[] b, int sec);</span>

  public static void main(String[] args) throws Exception {
    <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="3">new Thread() {                                                      </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">  public void run() {                                               </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">    while(true) {                                                   </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">      try { Thread.sleep(1_000); } catch (InterruptedException e) {}</span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">      System.gc();                                                  </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">    }                                                               </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="3">  }                                                                 </span>
    <span class="fragment highlight-current-border border-no-top" data-fragment-index="3">}.start();                                                          </span>
    <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="5">int sec = Integer.parseInt(args[1]);                        </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">byte[] b = new byte[42];                                    </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">switch (args[0]) {                                          </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">  case "block" : block(sec); break;                         </span>
    <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">  case "elements" : elements(b, sec); break;                </span>
    <span class="fragment highlight-current-border border-no-top" data-fragment-index="5">  case "elementsCritical" : elementsCritical(b, sec); break;</span>
              </code>
            </pre>

          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
void <span class="fragment highlight-current-border" data-fragment-index="1">block</span>(JNIEnv* env, jclass cls, jint s) {
  <span class="fragment highlight-current-border" data-fragment-index="1">sleep(s)</span>;
}

void <span class="fragment highlight-current-border" data-fragment-index="3">elements</span>(JNIEnv* env, jclass cls, jbyteArray b, jint s) {
  jboolean copy;
  jbyte* jb = (jbyte*)<span class="fragment highlight-current-border" data-fragment-index="3">env-&gt;GetByteArrayElements(b, &amp;copy)</span>;
  printf("GetByteArrayElements() returned %s\n", <span class="fragment highlight-current-border" data-fragment-index="5">copy ? "copy":"original"</span>);
  sleep(s);
  env-&gt;ReleaseByteArrayElements(b, jb, copy ? JNI_ABORT : 0);
}

void <span class="fragment highlight-current-border" data-fragment-index="7">elementsCritical</span>(JNIEnv* env, jclass cls, jbyteArray b, jint s) {
  jboolean copy;
  jbyte* jb = (jbyte*)<span class="fragment highlight-current-border" data-fragment-index="7">env-&gt;GetPrimitiveArrayCritical(b, &amp;copy)</span>;
  printf("GetPrimitiveArrayCritical() returned %s\n", copy ? "copy":"original");
  sleep(s);
  env-&gt;ReleasePrimitiveArrayCritical(b, jb, copy ? JNI_ABORT : 0);
}
              </code>
            </pre>

          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
jint JNI_OnLoad(JavaVM *vm, void *reserved) {
  JNIEnv* env;
  vm-&gt;GetEnv((void**)&amp;env, JNI_VERSION_1_8);
  jclass cls = env-&gt;FindClass("io/simonis/NativeCallGC");
  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="7">static JNINativeMethod methods[] = {                       </span>
  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="7">  {"block", "(I)V", (void*)&amp;block},                        </span>
  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="7">  {"elements", "([BI)V", (void*)&amp;elements},                </span>
  <span class="fragment highlight-current-border border-no-top" data-fragment-index="7">  {"elementsCritical", "([BI)V", (void*)&amp;elementsCritical},</span>
  };
  env-&gt;RegisterNatives(cls, methods, 3);
  return JNI_VERSION_1_8;
}
              </code>
            </pre>

          </section>

          <section class="center">
            <h1>Demo - <code>GCLocker</code></h1>
          </section>

          <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

            <pre class="big noshadow" style="height:101%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java -Djava.library.path=examples/cpp/ -Xlog:gc -showversion \
       -cp examples/java/ io.simonis.NativeCallGC block 3
<span class="fragment">[0.006s][info][gc] Using G1
openjdk version "21" 2023-09-19 LTS
[1,058s][info][gc] GC(0) Pause Full (System.gc()) 2M->1M(28M) 9,267ms
[2,064s][info][gc] GC(1) Pause Full (System.gc()) 1M->1M(16M) 6,033ms
[3,070s][info][gc] GC(2) Pause Full (System.gc()) 1M->1M(16M) 5,804ms
$</span><span class="fragment"> java -Djava.library.path=examples/cpp/ -Xlog:gc -showversion \
       -cp examples/java/ io.simonis.NativeCallGC elements 3</span>
<span class="fragment">[0.006s][info][gc] Using G1
openjdk version "21" 2023-09-19 LTS
<span class="fragment highlight-current-border">GetByteArrayElements() returned copy</span>
[1,058s][info][gc] GC(0) Pause Full (System.gc()) 2M->1M(28M) 9,673ms
[2,064s][info][gc] GC(1) Pause Full (System.gc()) 1M->1M(16M) 6,158ms
[3,070s][info][gc] GC(2) Pause Full (System.gc()) 1M->1M(16M) 5,701ms
$</span><span class="fragment"> java -Djava.library.path=examples/cpp/ -Xlog:gc -showversion \
       -cp examples/java/ io.simonis.NativeCallGC elementsCritcal 3</span>
<span class="fragment">[0.006s][info][gc] Using G1
openjdk version "21" 2023-09-19 LTS
<span class="fragment highlight-current-border">GetPrimitiveArrayCritical() returned original</span>
[3,048s][info][gc] GC(0) Pause Young (Normal) <span class="fragment highlight-current-border">(GCLocker Initiated GC)</span> 2M->1M(504M) 1,218ms
[3,056s][info][gc] GC(1) Pause Full (System.gc()) 1M->1M(16M) 8,099ms</span>
              </code>
            </pre>

          </section>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">

            <h1>Critical Native Functions</h1>

            <ul>
              <li>Controlled by <a href="https://bugs.openjdk.org/browse/JDK-7013347"><code>-XX:+CriticalJNINatives</code></a></li>
              <li>JDK-internal optimization introduced in JDK 7</li>
              <li>Only for JNI calls with primitive/array arguments
                <ul>
                  <li>Only static "<em>leave-calls</em>" (i.e. no <code>JNIEnv*</code>/<code>jobject</code>)</li>
                </ul>
              </li>
              <li>Primitive arrays are converted to a length and raw data pointer
                <ul>
                  <li>Implicit <code>Get/RelasePrimitiveArrayCritical </code>(still block GC)</li>
                </ul>
              </li>
              <li>Only for compiled methods (i.e. native wrapper)
                <ul>
                  <li>Need both, JNI and Critcal JNI method<br/><br/></li>
                </ul>
              </li>
              <li>Deprecated in JDK 16 (<a href="https://bugs.openjdk.org/browse/JDK-8233343">JDK-8233343</a>)</li>
              <li>Removed in JDK 18 (<a href="https://bugs.openjdk.org/browse/JDK-8258192">JDK-8258192</a>)</li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true" style="height:100%">
  public static native void <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="3">staticEmpty();     </span>
  public static native void <span class="fragment highlight-current-border border-no-top" data-fragment-index="3">jniCriticalEmpty();</span>
  public static native long <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="5">staticArray(byte[] b);     </span>
  public static native long <span class="fragment highlight-current-border border-no-top" data-fragment-index="5">jniCriticalArray(byte[] b);</span>

  @Benchmark
  public void callingStaticEmpty() {
    staticEmpty();
  }
  @Benchmark
  public void callingJniCriticalEmpty() {
    jniCriticalEmpty();
  }
  @Benchmark
  public void callingStaticArray() {
    staticArray(array);
  }
  @Benchmark
  public void callingJniCriticalArray() {
    jniCriticalArray(array);
  }
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
void         Java_io_simonis_NativeCall_staticEmpty(JNIEnv*, jclass) {}

void <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="5">        Java</span>_io_simonis_NativeCall_<span class="fragment highlight-current-border border-no-bottom" data-fragment-index="3">jniCriticalEmpty</span>(JNIEnv*, jclass) {}
void <span class="fragment highlight-current-border border-no-top" data-fragment-index="5"><span class="fragment highlight-current-border" data-fragment-index="7">JavaCritical</span></span>_io_simonis_NativeCall_<span class="fragment highlight-current-border border-no-top" data-fragment-index="3">jniCriticalEmpty</span><span class="fragment highlight-current-border" data-fragment-index="7">()</span> {}

long <span class="fragment highlight-current-border" data-fragment-index="9">Java_io_simonis_NativeCall_staticArray</span>(JNIEnv* env, jclass cls, jbyteArray b) {
  <span class="fragment highlight-current-border" data-fragment-index="11">jbyte* jb = (jbyte*)env->GetPrimitiveArrayCritical(b, 0)</span>;
  jbyte <span class="fragment highlight-current-border" data-fragment-index="13">ret = *jb</span>;
  <span class="fragment highlight-current-border" data-fragment-index="11">env->ReleasePrimitiveArrayCritical(b, jb, JNI_ABORT)</span>;
  return ret;
}

long <span class="fragment highlight-current-border" data-fragment-index="9">Java_io_simonis_NativeCall_jniCriticalArray</span>(JNIEnv* env, jclass cls, jbyteArray b) {
  <span class="fragment highlight-current-border" data-fragment-index="11">jbyte* jb = (jbyte*)env->GetPrimitiveArrayCritical(b, 0)</span>;
  jbyte <span class="fragment highlight-current-border" data-fragment-index="13">ret = *jb</span>;
  <span class="fragment highlight-current-border" data-fragment-index="11">env->ReleasePrimitiveArrayCritical(b, jb, JNI_ABORT)</span>;
  return ret;
}

long <span class="fragment highlight-current-border" data-fragment-index="15">JavaCritical</span>_io_simonis_NativeCall_<span class="fragment highlight-current-border" data-fragment-index="15">jniCriticalArray(jint length, jbyte* b)</span> {
  <span class="fragment highlight-current-border" data-fragment-index="17">return *b</span>;
}
              </code>
            </pre>
          </section>


          <section data-background="images/background_default.jpg" class="demo">

            <h1>Benchmark: JNI vs. Critical JNI Call</h1>
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java -jar benchmarks.jar
# JMH version: 1.37
# VM version: JDK 1.8.0_372, OpenJDK 64-Bit Server VM, 25.372-b07
...
Benchmark                           Mode  Cnt   Score   Error  Units

NativeCall.callingStaticEmpty       avgt    5  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="1">12.892</span> ± 0.026  ns/op
NativeCall.callingJniCriticalEmpty  avgt    5  <span class="fragment highlight-current-border border-no-top" data-fragment-index="1">10.592</span> ± 0.022  ns/op

NativeCall.callingStaticArray       avgt    5  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="3">65.753</span> ± 0.248  ns/op
NativeCall.callingJniCriticalArray  avgt    5  <span class="fragment highlight-current-border border-no-top" data-fragment-index="3">10.790</span> ± 0.401  ns/op
              </code>
            </pre>
<!--
Laptop (benchmark_start.sh / cset)

Corretto 8
==========
Benchmark                           (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5  10.790 ± 0.401  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5  10.592 ± 0.022  ns/op
NativeCall.callingStaticArray              1  avgt    5  65.753 ± 0.248  ns/op
NativeCall.callingStaticEmpty              1  avgt    5  12.892 ± 0.026  ns/op

Corretto 8 -XX:+UseMembar
==========
Benchmark                           (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5  19.576 ± 0.053  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5  17.449 ± 0.016  ns/op
NativeCall.callingStaticArray              1  avgt    5  98.952 ± 0.203  ns/op
NativeCall.callingStaticEmpty              1  avgt    5  19.560 ± 0.013  ns/op


Corretto 11 -XX:-UseMembar
===========
Benchmark                           (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5  12.173 ± 0.025  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5  10.267 ± 0.052  ns/op
NativeCall.callingStaticArray              1  avgt    5  78.219 ± 0.397  ns/op
NativeCall.callingStaticEmpty              1  avgt    5  11.636 ± 0.029  ns/op

Corretto 11
===========
Benchmark                           (length)  Mode  Cnt    Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5   20.625 ± 0.018  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5   18.525 ± 0.054  ns/op
NativeCall.callingStaticArray              1  avgt    5  114.923 ± 0.170  ns/op
NativeCall.callingStaticEmpty              1  avgt    5   20.106 ± 0.061  ns/op

Corretto 17 -XX:+CriticalJNINatives
===========
Benchmark                           (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5   9.520 ± 0.013  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5   9.073 ± 0.042  ns/op
NativeCall.callingStaticArray              1  avgt    5  84.776 ± 0.107  ns/op
NativeCall.callingStaticEmpty              1  avgt    5  21.145 ± 0.002  ns/op
-->
          </section>
        </section>

        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">

            <h1>Thread State Transitions and <a href="hottps://simonis.github.io/hotspot_internals/hotspot_internals.xhtml#/6/2">Safepoints</a></h1>

            <ul>
              <li>HotSpot uses a <em>cooperative</em> suspension model</li>
              <li>All threads need to come to a safepoint quickly if required
                <ul>
                  <li>Running <code>in_Java</code> (Interpreted): change interpreter dispatch table</li>
                  <li>Running <code>in_Java</code> (JIT-compiled): read global safepoint polling page</li>
                  <li>Running <code>in_native</code> (JNI): no need to stop<br/>
                    - native code accesses oops through handles<br/>
                    - block when returning from JNI or up-calling to Java</li>
                </ul>
              </li>
              <li class="fragment"><em class="bold">Safepointing and Thread State have to be synchronized!</em>
                <ol class="fragment">
                  <li>Full Memory Barrier (<a href="https://bugs.openjdk.org/browse/JDK-8187809"><code>-XX:+/-UseMembar</code></a>)</li>
                  <li><a href="https://man7.org/linux/man-pages/man2/mprotect.2.html"><code>mprotect(2)</code></a> trick / <a href="https://man7.org/linux/man-pages/man2/membarrier.2.html"><code>membarrier(2)</code></a></li>
                </ol>
              </li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <h2>Calling empty native method (ns/op)</h2>

            <table style="border: 1px solid; border-collapse: separate;">
              <thead>
                <tr>
                  <th style="border-right: 6px double; border-bottom: 6px double;"></th>
                  <th style="border-right: 1px solid; border-bottom: 6px double;">m5.metal<br/>Xeon 8175</th>
                  <th style="border-right: 1px solid; border-bottom: 6px double;">my laptop<br/>i7-8650U</th>
                  <th style="border-right: 1px solid; border-bottom: 6px double;">m6g.metal<br/>Graviton 2</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td style="border-right: 6px double;">JDK 8</td>
                  <td style="text-align: right; border-right: 1px solid;"><em>5.7</em></td>
                  <td style="text-align: right; border-right: 1px solid;"><em>9.8</em></td>
                  <td style="text-align: right; border-right: 1px solid;">27.8</td>
                </tr>
                <tr>
                  <td style="border-right: 6px double; border-bottom: 6px double;">JDK 8 +UseMembar</td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;">10.7</td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;">19.6</td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;"><em>26.7</em></td>
                </tr>
                <tr>
                  <td style="border-right: 6px double;">JDK 11</td>
                  <td style="text-align: right; border-right: 1px solid;">5.7</td>
                  <td style="text-align: right; border-right: 1px solid;">11.1</td>
                  <td style="text-align: right; border-right: 1px solid;">27.6</td>
                </tr>
                <tr>
                  <td style="border-right: 6px double; border-bottom: 6px double;">JDK 11 +UseMembar</td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;"><em>10.9</em></td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;"><em>20.1</em></td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;"><em>27.6</em></td>
                </tr>
                <tr>
                  <td style="border-right: 6px double; border-bottom: 6px double;">JDK 17</td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;"><em>10.6</em></td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;"><em>22.6</em></td>
                  <td style="text-align: right; border-bottom: 6px double; border-right: 1px solid;"><em>17.6</em></td>
                </tr>
                <tr>
                  <td style="border-right: 6px double;">JDK 21</td>
                  <td style="text-align: right; border-right: 1px solid;"><em>11.0</em></td>
                  <td style="text-align: right; border-right: 1px solid;"><em>20.1</em></td>
                  <td style="text-align: right; border-right: 1px solid;"><em>17.6</em></td>
                </tr>
                <tr>
                  <td style="border-right: 6px double;">JDK 21 +UseSystemM..B..</td>
                  <td style="text-align: right; border-right: 1px solid;">5.5</td>
                  <td style="text-align: right; border-right: 1px solid;">10.2</td>
                  <td style="text-align: right; border-right: 1px solid;">17.6</td>
                </tr>
              </tbody>
            </table>

          </section>
        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg" class="demo">

            <h2><a href="https://github.com/apangin/nalim">Nalim</a> - using JVMCI to speedup native calls</h2>

            <ul>
              <li>Invented by Andrei Pangin (author of
                <a href="https://github.com/async-profiler/async-profiler">AsyncProfiler</a>)</li>
              <li>Leverages <a href="https://openjdk.org/jeps/243">JVM Compiler Interface</a> (JVMCI)</li>
              <li>Elegant and fast (skips native transition)
                <ul>
                  <li>..but blocks Safepoint synchronization</li>
                </ul>
              </li>
              <li>Only static methods with primitive/array/field arguments </li>
              <li>No <code>JNIEnv*</code>, no Java up-calls</li>
              <li>Not <em>officially</em> supported
                <ul>
                  <li>..JVMCI interfaces not publicly exported</li>
                </ul>
              </li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true" style="height:100%">
<span class="fragment highlight-current-border border-no-bottom" data-fragment-index="3">import one.nalim.Link;  </span>
<span class="fragment highlight-current-border border-no-top" data-fragment-index="3">import one.nalim.Linker;</span>

  <span class="fragment highlight-current-border" data-fragment-index="5">@Link</span>
  public static native void nalimEmpty();
  <span class="fragment highlight-current-border" data-fragment-index="5">@Link</span>
  public static native long nalimArray(<span class="fragment highlight-current-border" data-fragment-index="7">int length, byte[] b</span>);

  @Benchmark
  public void callingNalimEmpty() {
    nalimEmpty();
  }

  @Benchmark
  public void callingNalimArray() {
    nalimArray(<span class="fragment highlight-current-border" data-fragment-index="7">array.length, array</span>);
  }
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
extern "C" JNIEXPORT
void JNICALL <span class="fragment highlight-current-border" data-fragment-index="3">nalimEmpty</span>() {}

extern "C" JNIEXPORT
long JNICALL <span class="fragment highlight-current-border" data-fragment-index="3">nalimArray</span>(<span class="fragment highlight-current-border" data-fragment-index="5">jint length, jbyte* b</span>) {
  <span class="fragment highlight-current-border" data-fragment-index="5">return *b</span>;
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <h2>Benchmark: JNI - Critical JNI - Nalim</h2>

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java <span class="fragment highlight-current-border" data-fragment-index="3">-XX:-UseMembar</span> -jar benchmarks.jar
# JMH version: 1.37
# VM version: <span class="fragment highlight-current-border" data-fragment-index="3">JDK 11.0.18</span>, OpenJDK 64-Bit Server VM, 11.0.18+10-LTS
...
Benchmark                           (length)  Mode  Cnt   Score   Error  Units

NativeCall.callingStaticEmpty              1  avgt    5  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="5">11.640</span> ± 0.012  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="5">10.180</span> ± 0.066  ns/op
NativeCall.callingNalimEmpty               1  avgt    5  <span class="fragment highlight-current-border border-no-top" data-fragment-index="5"> 3.703</span> ± 0.005  ns/op

NativeCall.callingStaticArray              1  avgt    5  <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="7">71.623</span> ± 0.369  ns/op
NativeCall.callingJniCriticalArray         1  avgt    5  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="7">12.173</span> ± 0.036  ns/op
NativeCall.callingNalimArray               1  avgt    5  <span class="fragment highlight-current-border border-no-top" data-fragment-index="7"> 4.984</span> ± 0.011  ns/op
              </code>
            </pre>
<!--
Laptop (benchmark_start.sh / cset)

# JMH version: 1.37
# VM version: JDK 11.0.18, OpenJDK 64-Bit Server VM, 11.0.18+10-LTS

Corretto 11 -XX:-UseMembar
============
Benchmark                           (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5  12.173 ± 0.036  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5  10.180 ± 0.066  ns/op
NativeCall.callingNalimArray               1  avgt    5   4.984 ± 0.011  ns/op
NativeCall.callingNalimEmpty               1  avgt    5   3.703 ± 0.005  ns/op
NativeCall.callingStaticArray              1  avgt    5  71.623 ± 0.369  ns/op
NativeCall.callingStaticEmpty              1  avgt    5  11.640 ± 0.012  ns/op

Corretto 11
============
Benchmark                           (length)  Mode  Cnt    Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5   20.634 ± 0.024  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5   18.519 ± 0.023  ns/op
NativeCall.callingNalimArray               1  avgt    5    3.918 ± 0.004  ns/op
NativeCall.callingNalimEmpty               1  avgt    5    3.704 ± 0.005  ns/op
NativeCall.callingStaticArray              1  avgt    5  109.295 ± 0.145  ns/op
NativeCall.callingStaticEmpty              1  avgt    5   20.106 ± 0.027  ns/op

Corretto 17
============
Benchmark                           (length)  Mode  Cnt   Score   Error  Units
NativeCall.callingJniCriticalArray         1  avgt    5   9.524 ± 0.011  ns/op
NativeCall.callingJniCriticalEmpty         1  avgt    5   9.085 ± 0.010  ns/op
NativeCall.callingNalimArray               1  avgt    5   3.919 ± 0.008  ns/op
NativeCall.callingNalimEmpty               1  avgt    5   3.177 ± 0.003  ns/op
NativeCall.callingStaticArray              1  avgt    5  81.926 ± 0.185  ns/op
NativeCall.callingStaticEmpty              1  avgt    5  19.573 ± 0.010  ns/op
-->
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
$ java -XX:CompileCommand=option,*::nalim*,PrintAssembly \                        
       -jar benchmarks.jar
              </code>
            </pre>
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="x86asm" data-trim="true" data-noescape="true" style="height:100%">
<span class="fragment" data-fragment-index="3">=========================== JVMCI-compiled nmethod =============================
Compiled method (JVMCI) 882  1  n  4  <span class="fragment highlight-current-border" data-fragment-index="5">io.simonis.NativeCall::nalimEmpty</span> (native)
[Verified Entry Point]
  # {method} {0x00007fff9447d630} 'nalimEmpty' '()V' in 'io/simonis/NativeCall'
  #           [sp+0x0]  (sp of caller)
  0x00007fffe0ef8b80:   <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="7">movabs $0x7ffff7e3e16a,%rax</span>
  0x00007fffe0ef8b8a:   <span class="fragment highlight-current-border border-no-top" data-fragment-index="7">jmpq   *%rax               </span></span>
<span class="fragment" data-fragment-index="9">
=========================== JVMCI-compiled nmethod =============================
Compiled method (JVMCI) 883  1  n  4  <span class="fragment highlight-current-border" data-fragment-index="11">io.simonis.NativeCall::nalimArray</span> (native)
[Verified Entry Point]
  # {method} {0x00007fff9447d810} 'nalimArray' '(I[B)J' in 'io/simonis/NativeCall'
  # <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="13">parm0:    rsi       = int </span>
  # <span class="fragment highlight-current-border border-no-top" data-fragment-index="13">parm1:    rdx:rdx   = '[B'</span>
  #           [sp+0x0]  (sp of caller)
  0x00007fffe0ef9c80:   <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="15">mov    %esi,%edi           </span>
  0x00007fffe0ef9c82:   <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="15">lea    0x10(%rdx),%rsi     </span>
  0x00007fffe0ef9c86:   <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="15">movabs $0x7ffff7e3e24d,%rax</span>
  0x00007fffe0ef9c90:   <span class="fragment highlight-current-border border-no-top" data-fragment-index="15">jmpq   *%rax               </span></span>
              </code>
            </pre>
<!--
LD_LIBRARY_PATH=/priv/simonisv/OpenJDK/hsdis/linux-amd64 /share/software/Java/corretto-17/bin/java -XX:CompileCommand=option,io.simonis.NativeCall::nalim*,PrintAssembly -XX:+UnlockDiagnosticVMOptions -XX:-PrintNMethods -Dgraal.PrintCompilation=true -XX:-CITime -XX:-PrintCompilation -XX:+CriticalJNINatives -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI __add-exports jdk.internal.vm.ci/jdk.vm.ci.code=ALL-UNNAMED __add-exports jdk.internal.vm.ci/jdk.vm.ci.code.site=ALL-UNNAMED __add-exports jdk.internal.vm.ci/jdk.vm.ci.hotspot=ALL-UNNAMED __add-exports jdk.internal.vm.ci/jdk.vm.ci.meta=ALL-UNNAMED __add-exports jdk.internal.vm.ci/jdk.vm.ci.runtime=ALL-UNNAMED -Djava.library.path=target/native -jar target/benchmarks.jar io.simonis.NativeCall.callingNalimArray$

OpenJDK 64-Bit Server VM warning: Option CriticalJNINatives was deprecated in version 16.0 and will likely be removed in a future release.
CompileCommand: PrintAssembly io/simonis/NativeCall.nalim* bool PrintAssembly = true
=========================== JVMCI-compiled nmethod =============================
- - - - - - - - - - - - - - - - - - Assembly - - - - - - - - - - - - - - - - - -

Compiled method (JVMCI)     882    1     n 4       io.simonis.NativeCall::nalimEmpty (native)
 total in heap  [0x00007fffe0ef8a10,0x00007fffe0ef8be8] = 472
 main code      [0x00007fffe0ef8b80,0x00007fffe0ef8b8c] = 12
 stub code      [0x00007fffe0ef8b8c,0x00007fffe0ef8b90] = 4
 oops           [0x00007fffe0ef8b90,0x00007fffe0ef8b98] = 8
 scopes data    [0x00007fffe0ef8b98,0x00007fffe0ef8ba0] = 8
 scopes pcs     [0x00007fffe0ef8ba0,0x00007fffe0ef8bc0] = 32
 dependencies   [0x00007fffe0ef8bc0,0x00007fffe0ef8bc8] = 8
 JVMCI data     [0x00007fffe0ef8bc8,0x00007fffe0ef8be8] = 32

[Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[Constant Pool (empty)]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

[Verified Entry Point]
  # {method} {0x00007fff9447d630} 'nalimEmpty' '()V' in 'io/simonis/NativeCall'
  #           [sp+0x0]  (sp of caller)
  0x00007fffe0ef8b80:   movabs $0x7ffff7e3e16a,%rax
  0x00007fffe0ef8b8a:   jmpq   *%rax
[Stub Code]
  0x00007fffe0ef8b8c:   hlt    
  0x00007fffe0ef8b8d:   hlt    
  0x00007fffe0ef8b8e:   hlt    
  0x00007fffe0ef8b8f:   hlt    
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[/Disassembly]

=========================== JVMCI-compiled nmethod =============================
- - - - - - - - - - - - - - - - - - Assembly - - - - - - - - - - - - - - - - - -

Compiled method (JVMCI)     883    1     n 4       io.simonis.NativeCall::nalimArray (native)
 total in heap  [0x00007fffe0ef9b10,0x00007fffe0ef9cf0] = 480
 main code      [0x00007fffe0ef9c80,0x00007fffe0ef9c92] = 18
 stub code      [0x00007fffe0ef9c92,0x00007fffe0ef9c98] = 6
 oops           [0x00007fffe0ef9c98,0x00007fffe0ef9ca0] = 8
 scopes data    [0x00007fffe0ef9ca0,0x00007fffe0ef9ca8] = 8
 scopes pcs     [0x00007fffe0ef9ca8,0x00007fffe0ef9cc8] = 32
 dependencies   [0x00007fffe0ef9cc8,0x00007fffe0ef9cd0] = 8
 JVMCI data     [0x00007fffe0ef9cd0,0x00007fffe0ef9cf0] = 32

[Disassembly]
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[Constant Pool (empty)]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

[Verified Entry Point]
  # {method} {0x00007fff9447d810} 'nalimArray' '(I[B)J' in 'io/simonis/NativeCall'
  # parm0:    rsi       = int
  # parm1:    rdx:rdx   = '[B'
  #           [sp+0x0]  (sp of caller)
  0x00007fffe0ef9c80:   mov    %esi,%edi
  0x00007fffe0ef9c82:   lea    0x10(%rdx),%rsi
  0x00007fffe0ef9c86:   movabs $0x7ffff7e3e24d,%rax
  0x00007fffe0ef9c90:   jmpq   *%rax
[Stub Code]
  0x00007fffe0ef9c92:   hlt    
  0x00007fffe0ef9c93:   hlt    
  0x00007fffe0ef9c94:   hlt    
  0x00007fffe0ef9c95:   hlt    
  0x00007fffe0ef9c96:   hlt    
  0x00007fffe0ef9c97:   hlt    
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
[/Disassembly]

-->
          </section>
        </section>

        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg">
            <h1><a href="https://github.com/java-native-access">JNA</a> - Java Native Access</h1>

            <ul>
              <li>Pure Java access to native libraries</li>
              <li>Builds on JNI
                <ul>
                  <li>Can&apos;t be faster than JNI!</li>
                </ul>
              </li>
              <li>Uses Java interfaces to describe native functionality</li>
              <li>Loads the native library and creates glue code:
                <ol>
                  <li>Using reflection (<a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/reflect/Proxy.html">
                      j.l.r.Proxy</a>) on the Java side </li>
                  <li>Using <a href="https://github.com/atgreen/libffi">libffi</a> on the native side</li>
                </ol>
              </li>
              <li>libffi is a <em>portable foreign-function interface library</em>
                <ul>
                  <li>E.g. used by the <a href="https://web.archive.org/web/20090531095111/http://today.java.net/pub/a/today/2009/05/21/zero-and-shark-openjdk-port.html">
                      OpenJDK Zero Assembler Port</a>
                  </li>
                </ul>
              </li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true" style="height:100%">
public class NativeCallJNA {
<span class="fragment" data-fragment-index="3">
  public interface CLibrary extends Library {
    void sayHello(String s);
    String getLine();
  }
</span><span class="fragment" data-fragment-index="10">
  public static native void sayHello(String s);
  public static native String getLine();
  static {
    <span class="fragment highlight-current-border" data-fragment-index="11">Native.register("NativeCallJNA")</span>;
  }
</span>
  public static void main(String[] args) {
<span class="fragment highlight" data-fragment-index="4">    CLibrary c = <span class="fragment highlight-current-border" data-fragment-index="5">Native.load("NativeCallJNA", CLibrary.class)</span>;
    <span class="fragment highlight-current-border" data-fragment-index="6">c.sayHello("JavaLand")</span>;
    System.out.println(<span class="fragment highlight-current-border" data-fragment-index="6">c.getLine()</span>);</span><span class="fragment" data-fragment-index="14">
    sayHello("JavaLand DIRECT");
    System.out.println(getLine());</span>
  }
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true" style="height:100%">
#include &lt;stdio.h&gt;

void sayHello(<span class="fragment highlight-current-border" data-fragment-index="1">char* s</span>) {
  printf("Hello %s\n", s);
}

<span class="fragment highlight-current-border" data-fragment-index="1">char*</span> getLine() {
  char* line = 0;
  size_t len = 0;
  getline(&amp;line, &amp;len, stdin);
  return line;
}
              </code>
            </pre>
          </section>

          <section data-background="images/background_default.jpg" class="demo">

            <div style="width: 100%">
              <div style="float: left; width: 35%">

                <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
                  <code class="terminal" data-trim="false" data-noescape="true" style="height:100%">
$ java -Djna.library.path=..\
     io.simonis.NativeCallJNA

Hello JavaLand

<span class="fragment" data-fragment-index="25">&lt;RETURN&gt;</span>
<span class="fragment" data-fragment-index="25">Hello JavaLand DIRECT</span>












<span>&nbsp;</span>
                </code>
              </pre>

              </div>
              <div style="position:relative; float: right; width: 64%">


                <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
                  <code class="terminal" data-trim="true" data-noescape="true" style="height:100%">
<span class="fragment" data-fragment-index="3">$ gdb ...</span>
<span class="fragment" data-fragment-index="5">(gdb) where</span>
<span class="fragment" data-fragment-index="7">#0 <span class="fragment highlight-current-border" data-fragment-index="9">getLine()</span> at examples/cpp/<span class="fragment highlight-current-border" data-fragment-index="9">NativeCallJNA.cpp:9</span>
#1 0x16052 in ??
#2 0x1511c in ??
#3 0x15458 in <span class="fragment highlight-current-border" data-fragment-index="11">ffi_call()</span>
#4 0x0aa5a in ??
#5 0x0b081 in Java_com_sun_<span class="fragment highlight-current-border" data-fragment-index="13">jna_Native_invokePointer()</span></span>
<span class="fragment" data-fragment-index="15">$ jstack ...</span>
<span class="fragment" data-fragment-index="17">at com.sun.<span class="fragment highlight-current-border" data-fragment-index="19">jna.Native.invokePointer(Native Method)</span>
at com.sun.jna.Function.invokePointer(Function.java:500)
at com.sun.jna.Function.invokeString(Function.java:663)
at com.sun.jna.Function.invoke(Function.java:437)
at com.sun.jna.Function.invoke(Function.java:364)
at com.sun.jna.Library$Handler.invoke(Library.java:270)
at jdk.proxy2.<span class="fragment highlight-current-border" data-fragment-index="23">$Proxy2.getLine(Unknown Source)</span>
at io.simonis.<span class="fragment highlight-current-border" data-fragment-index="21">NativeCallJNA.main</span>(NativeCallJNA.java:23)</span>
<span class="fragment" data-fragment-index="27">$ jstack ...</span>
<span class="fragment" data-fragment-index="29">at io.simonis.<span class="fragment highlight-current-border" data-fragment-index="31">NativeCallJNA.getLine(Native Method)</span>
at io.simonis.NativeCallJNA.main(NativeCallJNA.java:25)</span>
                  </code>
                </pre>
              </div>
            </div>
<!--
java -Djna.debug_load.jna=true -Djna.debug_load=true -Djnidispatch.preserve=true -Djava.library.path=/tmp/com/sun/jna/linux-x86-64 -Djna.library.path=examples/cpp -cp /tmp/com/sun/jna/linux-x86-64:examples/deps/jna-5.14.0.jar:examples/java io.simonis.NativeCallJNA

Hello JavaLand

Thread 2 "java" hit Breakpoint 1, getLine () at examples/cpp/NativeCallJNA.cpp:9
9	char* getLine() {
(gdb) where
#0  getLine () at examples/cpp/NativeCallJNA.cpp:9
#1  0x00007fffb7416052 in ?? () from /home/ANT.AMAZON.COM/simonisv/.cache/JNA/temp/jna8224722017600131272.tmp
#2  0x00007fffb741511c in ?? () from /home/ANT.AMAZON.COM/simonisv/.cache/JNA/temp/jna8224722017600131272.tmp
#3  0x00007fffb7415458 in ffi_call () from /home/ANT.AMAZON.COM/simonisv/.cache/JNA/temp/jna8224722017600131272.tmp
#4  0x00007fffb740aa5a in ?? () from /home/ANT.AMAZON.COM/simonisv/.cache/JNA/temp/jna8224722017600131272.tmp
#5  0x00007fffb740b081 in Java_com_sun_jna_Native_invokePointer () from /home/ANT.AMAZON.COM/simonisv/.cache/JNA/temp/jna8224722017600131272.tmp
#6  0x00007fffdfb4710e in ?? ()

	at com.sun.jna.Native.invokePointer(Native Method)
	at com.sun.jna.Function.invokePointer(Function.java:500)
	at com.sun.jna.Function.invokeString(Function.java:663)
	at com.sun.jna.Function.invoke(Function.java:437)
	at com.sun.jna.Function.invoke(Function.java:364)
	at com.sun.jna.Library$Handler.invoke(Library.java:270)
	at jdk.proxy2.$Proxy2.getLine(jdk.proxy2/Unknown Source)
	at io.simonis.NativeCallJNA.main(NativeCallJNA.java:23)

Hello JavaLand DIRECT

	at io.simonis.NativeCallJNA.getLine(Native Method)
	at io.simonis.NativeCallJNA.main(NativeCallJNA.java:25)

-->
          </section>

        </section>


        <section data-background="images/background_default.jpg" class="demo" style="height: 100%;">

          <section data-background="images/background_default.jpg">
            <h1>References</h1>

            <div style="display: inline-block; text-align: left;">
              <p>Thread state transitions:</p>
              <ul>
                <li><a href="https://bugs.openjdk.org/browse/JDK-5075546">
                    JDK-5075546: remove memory barrier on native transitions</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-6401008">
                    JDK-6401008: re-add -XX:+UseMembar support in mustang</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8187809">
                    JDK-8187809: UseMembar should be set true and deprecate the flag</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8213436">
                    JDK-8213436: Obsolete UseMembar</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8292591">
                    JDK-8292591: Experimentally add back barrier-less Java thread transitions</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8303210">
                    JDK-8303210: Make UseSystemMemoryBarrier available as product flag</a></li>
                <li><a href="https://stackoverflow.com/questions/43722456/behavior-of-mprotect-with-multiple-threads">
                    Behavior of mprotect with multiple threads</a></li>
                <li><a href="https://groups.google.com/g/mechanical-sympathy/c/envzRs2KNOY">
                    Memory model of mprotect</a></li>
                <li><a href="https://man7.org/linux/man-pages/man2/mprotect.2.html">
                    Manpage: <code>mprotect(2)</code></a></li>
                <li><a href="https://man7.org/linux/man-pages/man2/membarrier.2.html">
                    Manpage: <code>membarrier(2)</code></a></li>
                <li><a href="">
                    </a></li>
              </ul>
            </div>
          </section>

          <section data-background="images/background_default.jpg">
            <h1>References</h1>

            <div style="display: inline-block; text-align: left;">
              <p>Critical Natives / Nalim:</p>
              <ul>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8289302">
                    JDK-8289302: Restore CriticalJNINatives</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8254693">
                    JDK-8254693: Add Panama feature to pass heap segments to native code</a></li>
                <li><a href="https://stackoverflow.com/questions/36298111/is-it-possible-to-use-sun-misc-unsafe-to-call-c-functions-without-jni
">
                    Is it possible to use sun.misc.Unsafe to call C functions without JNI?</a></li>
                <li><a href="https://jokerconf.com/en/talks/27af781e3b00447ba7bf8bbb387fb83c/">
                    Calling native methods without a JNI overhead</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-7013347">
                    JDK-7013347: allow crypto functions to be called inline to enhance performance</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8167408">
                    JDK-8167408: Invalid critical JNI function lookup</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8233343">
                    JDK-8233343: Deprecate -XX:+CriticalJNINatives flag which implements JavaCritical native functions</a></li>
                <li><a href="https://bugs.openjdk.org/browse/JDK-8258192">
                    JDK-8258192: Obsolete the CriticalJNINatives flag</a></li>
                <li><a href="https://github.com/apangin/nalim">
                    https://github.com/apangin/nalim</a></li>
                <li><a href="https://github.com/bytedeco/javacpp/issues/16">
                    JavaCPP: GetPrimitiveArrayCritical option for byte array push</a></li>
              </ul>
            </div>
          </section>
        </section>

        <section data-background="images/background_last.jpg">
          <h2 style="text-transform: none;">
            <a href="https://simonis.github.io/JavaLand2024/" style="color: inherit;">https://simonis.github.io/JavaLand2024/</a>
          </h2>
        </section>

      </div>

    </div>


    <script src="reveal.js/lib/js/head.min.js"></script>
    <script src="reveal.js/js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        //width: 1024,
        //height: 768,
        //width: 1280,
        //height: 720,
        //width: 1366,
        //height: 768,
        width: 1920,
        height: 1080,
        margin: 0.1,
        controls: true,
        progress: true,
        history: true,
        center: true,
        slideNumber: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() {

hljs.registerLanguage('terminal', function(hljs) {
  return {
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      {
        className: 'title',
        lexemes: /[$()>_a-zA-Z0-9\]\[]+/,
        keywords: "$ (gdb) hsdb> main[1] >",
        begin: /^\$ |\(gdb\)|hsdb> |main\[1\] |> /,
        end: /[^\\]\n/,
	contains: [
          hljs.COMMENT('//', '$', { endsParent: true })
	]
      }
    ]
  }
});

hljs.initHighlightingOnLoad(); } },
          { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true },
          { src: 'reveal.js/plugin/notes/notes.js', async: true }
        ]
      });

      //Reveal.configure({ slideNumber: true });



<![CDATA[

      // This function was adapted from:
      // Titus Cieslewski (https://stackoverflow.com/users/796329/titus-cieslewski) and
      // Dan Harper (https://stackoverflow.com/users/148975/danharper) from:
      // https://stackoverflow.com/questions/808826/draw-arrow-on-canvas-tag
      function canvas_arrow(context, fromx, fromy, tox, toy){
        var headlen = 10;   // length of head in pixels
        var angle = Math.atan2(toy-fromy,tox-fromx);
        context.lineCap = 'round';
        context.moveTo(fromx, fromy);
        context.lineTo(tox, toy);
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle-Math.PI/6),toy-headlen*Math.sin(angle-Math.PI/6));
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle+Math.PI/6),toy-headlen*Math.sin(angle+Math.PI/6));
      }

      function drawArrow(canvas, from, target, color) {
        var ctx = canvas.getContext("2d");
        ctx.lineWidth = 3;
        ctx.strokeStyle= color;
        var x1, y1, x2, y2;
        if ((from.offsetTop + from.offsetHeight) < (target.offsetTop)) {
          // 'from' above 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft;
            y2 = target.offsetTop;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop;
          }
        }
        else if ((from.offsetTop) > (target.offsetTop + target.offsetHeight)) {
          // 'from' below 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop;
            x2 = target.offsetLeft;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop + target.offsetHeight;
          }
        }
        else if ((from.offsetLeft) < (target.offsetLeft)) {
          // 'from' feft of 'target'
          x1 = from.offsetLeft + from.offsetWidth;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        else {
          // 'from' right of 'target'
          x1 = from.offsetLeft;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft + target.offsetWidth;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        //ctx.bezierCurveTo(30,60,40,100, 50,120);
        ctx.lineTo(x2, y2);
        canvas_arrow(ctx, x1, y1, x2, y2);
        ctx.stroke();
      }

      function handleFragmentEvent(fragments, current, show) {
        var code = current.parentNode;
        var firstArrow = true;
        var fragmentShown = false;

        var canvas, canvases = code.getElementsByTagName("canvas");
        if (canvases.length != 0) {
          canvas = canvases[0];
          canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
        }
        fragments.forEach(function(fragment, i) {
          if (show === false && current === fragment) fragmentShown = true;
          var cll = fragment.classList;
          if (((cll.contains("highlight-border") && !fragmentShown) ||
               (cll.contains("highlight-current-border") && cll.contains("current-fragment"))) &&
              fragment.hasAttribute("arrow-to")) {

            var target = document.getElementById(fragment.getAttribute("arrow-to"));
            if (canvases.length === 0) {
              canvas = document.createElement("canvas");
              // Place the canvas right over the parent node ..
              canvas.style.position= 'absolute';
              canvas.style.zIndex= '100';
              canvas.style.top= '0px';
              canvas.style.left= '0px';
              // .. and make it the same size.
              canvas.style.width= code.offsetWidth + 'px';
              canvas.style.height= code.offsetHeight + 'px';
              // Make the canvas bounding box (i.e. canvas' css dimensions)
              // and the canvas logical size be the same. That way we don't
              // have to convert between the two coordinate systems of the
              // elemnts on the overlaying DOM element and the canvas.
              canvas.width= code.offsetWidth;
              canvas.height= code.offsetHeight;
              code.appendChild(canvas);
            }
            drawArrow(canvas, fragment, target, "#1b91ff");
          }
          if (show === true && current === fragment) fragmentShown = true;
        });
      }

      Reveal.addEventListener('fragmenthidden', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[0], false);
      });

      Reveal.addEventListener('fragmentshown', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[event.fragments.length - 1], true);
      });


]]>
    </script>

  </body>
</html>

<!--  LocalWords:  zlib OpenJDK scrollable px pre hljs noshadow fff
 -->
<!--  LocalWords:  elemnts hirarchy monospace arial helvetica ffffff
 -->
<!--  LocalWords:  td functionCall darkblue javaCall darkgreen ffa cb
 -->
<!--  LocalWords:  rowspan fefefe rgba webkit animatetop keyframes li
 -->
<!--  LocalWords:  eee attr Roboto eval defun setq inputStr substring
 -->
<!--  LocalWords:  resultStr concat kbd ia vhs JNI JDK Changelog CRC
 -->
<!--  LocalWords:  intrinsification Redestad lookups LZ abaca ecb LZZ
 -->
<!--  LocalWords:  aecb daecb mozilla xml aarch MacOSX CVE MacOS ASM
 -->
<!--  LocalWords:  readCount InflaterInputStream cloudflare LFH CFH
 -->
<!--  LocalWords:  src ZipOutputStream putNextEntry ZipEntry's vers
 -->
<!--  LocalWords:  GZIP Gzip infgen
 -->
